{"version":3,"sources":["../src/testing.js"],"names":["scrutinizerJSON","authToken","reportType","startTime","endTime","ipAddress","params","rm","action","rpt_json","JSON","stringify","reportTypeLang","reportDirections","selected","times","dateRange","start","end","clientTimezone","filters","sdfDips_0","dataGranularity","data_requested","inbound","graph","table","query_limit","offset","max_num_rows","scrutinizerRequest","rearrangeData","arr","oldIndex","newIndex","old_index","length","new_index","k","push","undefined","splice","Object","keys","map","key","encodeURIComponent","join","scrutData","datatoGraph","graphingData","parse","responseText","i","j","graphData","tableData","target","datapoints","scrutUrl","scrutParams","request","XMLHttpRequest","url","Promise","resolve","reject","onreadystatechange","readyState","status","console","log","statusText","open","send"],"mappings":"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","file":"testing.js","sourcesContent":["export class scrutinizerJSON {\r\n  constructor() {}\r\n\r\n  reportJSON(authToken, reportType, startTime, endTime, ipAddress) {\r\n    let params = {\r\n      rm: \"report_api\",\r\n      action: \"get\",\r\n      authToken: authToken,\r\n      rpt_json: JSON.stringify({\r\n        reportTypeLang: reportType,\r\n        reportDirections: {\r\n          selected: \"inbound\"\r\n        },\r\n        times: {\r\n          dateRange: \"Custom\",\r\n          start: `${startTime}`,\r\n          end: `${endTime}`,\r\n          clientTimezone: \"America/New_York\"\r\n        },\r\n        filters: {\r\n          sdfDips_0: `in_${ipAddress}_${ipAddress}_ALL`\r\n        },\r\n        dataGranularity: {\r\n          selected: \"auto\"\r\n        }\r\n      }),\r\n\r\n      data_requested: JSON.stringify({\r\n        inbound: {\r\n          graph: \"all\",\r\n          table: {\r\n            query_limit: {\r\n              offset: 0,\r\n              max_num_rows: 10\r\n            }\r\n          }\r\n        }\r\n      })\r\n    };\r\n    \r\n    return params;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport class scrutinizerRequest {\r\n  constructor() {\r\n //scrutinizer returns graph data opposite of how grafana wants it. So we flip it here.\r\n    this.rearrangeData = (arr, oldIndex, newIndex) => {\r\n      while (oldIndex < 0) {\r\n        old_index += arr.length;\r\n      }\r\n      while (newIndex < 0) {\r\n        new_index += arr.length;\r\n      }\r\n      if (newIndex >= arr.length) {\r\n        let k = newIndex - arr.length;\r\n  \r\n        while (k-- + 1) {\r\n          arr.push(undefined);\r\n        }\r\n      }\r\n      arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n      return arr;\r\n    };\r\n  }\r\n\r\n  //used to get all the parameted into the request.\r\n  formatParams(params) {\r\n    return (\r\n      \"?\" +\r\n      Object.keys(params)\r\n        .map(function(key) {\r\n          return key + \"=\" + encodeURIComponent(params[key]);\r\n        })\r\n        .join(\"&\")\r\n    );\r\n  }\r\n\r\n\r\n  //grafana wants time in millaseconds. so we multiple by 1000.\r\n  formatData(scrutData){\r\n    let datatoGraph = [];\r\n    let graphingData = JSON.parse(scrutData.responseText);\r\n    let i, j = 0;\r\n    let graphData = graphingData[\"report\"][\"graph\"][\"pie\"][\"inbound\"];\r\n    let tableData = graphingData[\"report\"][\"graph\"][\"timeseries\"][\"inbound\"];\r\n    for (i = 0; i < tableData.length; i++) {\r\n      for (j = 0; j < tableData[i].length; j++) {\r\n        tableData[i][j][0] = tableData[i][j][0] * 1000;\r\n\r\n        this.rearrangeData(tableData[i][j], 0, 1);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < graphData.length; i++) {\r\n      datatoGraph.push({\r\n        target: graphData[i][\"label\"],\r\n        datapoints: tableData[i]\r\n      });\r\n    }\r\n\r\n      return datatoGraph\r\n  }\r\n\r\n  makeRequest(scrutUrl, scrutParams) {\r\n    let request = new XMLHttpRequest();\r\n    let url = scrutUrl + scrutParams;\r\n    return new Promise((resolve, reject) => {\r\n      request.onreadystatechange = function() {\r\n        // Only run if the request is complete\r\n        if (request.readyState !== 4) return;\r\n\r\n        // Process the response\r\n        if (request.status >= 200 && request.status < 300) {\r\n          // If successful\r\n          console.log(request);\r\n\r\n          resolve(request);\r\n        } else {\r\n          // If failed\r\n          reject({\r\n            status: request.status,\r\n            statusText: request.statusText\r\n          })\r\n        }\r\n      };\r\n\r\n      // Setup our HTTP request\r\n      request.open(\"GET\", url, true);\r\n\r\n      // Send the request\r\n      request.send();\r\n    });\r\n  }\r\n};\r\n\r\n\r\n"]}