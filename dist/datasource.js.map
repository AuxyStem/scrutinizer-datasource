{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","exporterList","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","numberofExporters","filterTypes","Promise","resolve","reject","forEach","includes","filterObject","sourceIp","exporterDetails","ports","destIp","exporterCount","push","adhocParams","findExporter","doRequest","then","exporterIpFound","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","interfaceList","interfaceDetails","interfaceID","exporterInterface","filterDrag","searchStr","interfaceName","exporterName","exporterIp","interfaceId","reportFilter","createAdhocFilters","scrutParams","createFilters","eachQuery","params","findtimeJSON","selectedInterval","response","dataGranularity","used","reportJSON","formatedData","formatData","concat","apply","target","undefined","reportInterface","reportType","index","array","createParams","console","log","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","toString","text","interfaceThings","rows","label","refresh","exporterJSON","datasourceRequest","map","replace","scopedVars","refId","report","direction","interface","reportFilters","reportDisplay","display","exporterParams","key","interfaces","exporterResults","k","exporterToSearch","interfacesToSearch","interfaceJson","presentOptions","HandleAdhocFilters"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata} from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.exporterList = this.exporterList();\r\n  }\r\n\r\n  query(options) {\r\n    \r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n    //data sent up into this list, it's returned at end.\r\n    let datatoGraph = [];\r\n    //only run a report if all options are populated, only matter when there are not adhoc filters.\r\n    this.runReport = false;\r\n    //takes the query and stores it to a variable\r\n    var query = this.buildQueryParameters(options);\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n    //add adhoc filters to the query.\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //counter is used to keep track of number of exporters. This matters for creating the filter ojects\r\n    let numberofExporters = 0;\r\n    let filterTypes = [\"Source IP Filter\",\"Add Port Filter\", \"Destination IP Filter\" ]\r\n\r\n    return new Promise((resolve,reject)=>{\r\n      if (query.adhocFilters.length > 0) {\r\n        query.adhocFilters.forEach(filter => {\r\n          if (!filterTypes.includes(filter[\"key\"])) {\r\n            numberofExporters++;\r\n          }\r\n          });\r\n\r\n        //start the process of gathering data from scrutinizer. \r\n        //filter object used to store data about addtional data about filters needed for Scrutinizer to return data. \r\n          let filterObject = {\r\n            sourceIp: [],\r\n            exporterDetails: [],\r\n            ports:[],\r\n            destIp:[]\r\n          };\r\n          \r\n          //this exporter count is compared to the number of exporters to verify we have loops threw everything before returning.\r\n          let exporterCount = 0;\r\n\r\n\r\n          query.adhocFilters.forEach(filter => {\r\n            if (filter[\"key\"] === \"Source IP Filter\") {\r\n              //source IPs are pushed up as an array, will add other filter methods later.\r\n              filterObject.sourceIp.push(filter[\"value\"]);\r\n            } else if(filter[\"key\"] === \"Add Port Filter\") {\r\n              \r\n              filterObject.ports.push(filter[\"value\"])\r\n              \r\n            }else if(filter[\"key\"] === \"Destination IP Filter\") {\r\n              \r\n              filterObject.destIp.push(filter[\"value\"])\r\n              \r\n            }else {\r\n              //in some cases we will be passed the DNS/SNMP name of an exporter, here we convert it to an IP address needed for final filter. \r\n              let adhocParams = makescrutJSON.findExporter(\r\n                this.scrutInfo,\r\n                filter[\"key\"]\r\n              );\r\n\r\n              this.doRequest(adhocParams).then(exporter_details => {\r\n                let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n\r\n                //need to find the interface ID for the interface passed to Scrutinizer.\r\n                let interfaceParams = makescrutJSON.interfaceJSON(\r\n                  this.scrutInfo,\r\n                  exporterIpFound\r\n                );\r\n                this.doRequest(interfaceParams).then(interfaceDetails => {\r\n                  let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n                  //for each interface that belongs to a device, we want to compare it against the one selected in grafana. If it matched we can add it to the filters\r\n                  interfaceList.forEach(exporterInterface => {\r\n                    let interfaceID = exporterInterface[5].filterDrag.searchStr;\r\n                    let interfaceName = exporterInterface[5][\"label\"];\r\n                    //if selected interface matches and interface in the list, add it to object\r\n                    if (filter[\"value\"] === interfaceName) {\r\n                      filterObject.exporterDetails.push({\r\n                        exporterName: filter[\"key\"],\r\n                        exporterIp: exporterIpFound,\r\n                        interfaceName: filter[\"value\"],\r\n                        interfaceId: interfaceID\r\n                      });\r\n                    }\r\n                  });\r\n\r\n                  exporterCount++;\r\n\r\n                  //we have now looped through all the exporters in the filters.\r\n                  if (exporterCount === numberofExporters) {\r\n                    //created the filters we need to pass into each gadget on the dashboard.\r\n                    let reportFilter = makescrutJSON.createAdhocFilters(filterObject);\r\n\r\n                    //run a query for each gadget on the dashboard.\r\n                    query.targets.forEach(eachQuery => {\r\n                      let scrutParams = makescrutJSON.createFilters(\r\n                        this.scrutInfo,\r\n                        options,\r\n                        reportFilter,\r\n                        eachQuery\r\n                      );\r\n\r\n                      let params = makescrutJSON.findtimeJSON(this.scrutInfo, scrutParams);\r\n                      //find out what interval the data is in, we need to use this later to normalize the graphs.\r\n                      this.doRequest(params).then(response => {\r\n                        let selectedInterval = response.data[\"report_object\"].dataGranularity.used;\r\n                        //set up JSON to go to Scrutinizer API\r\n                        let params = makescrutJSON.reportJSON(\r\n                          this.scrutInfo,\r\n                          scrutParams\r\n                        );\r\n                        //request for report data made to scrutinizer\r\n                        this.doRequest(params).then(response => {\r\n                          //data organized into how Grafana expects it.\r\n                          let formatedData = dataHandler.formatData(\r\n                            response.data,\r\n                            scrutParams,\r\n                            selectedInterval\r\n                          );\r\n\r\n                          datatoGraph.push(formatedData);\r\n                          datatoGraph = [].concat.apply([], datatoGraph);\r\n                          numberOfQueries++;\r\n                          //make sure we have gone through each query in a gadget.\r\n                          if (numberOfQueries === query.targets.length) {\r\n                            return resolve({ data: datatoGraph });\r\n                          }\r\n                        });\r\n                      });\r\n                    });\r\n                  }\r\n                });\r\n              });\r\n            }\r\n          });\r\n\r\n      } else {\r\n        if (\r\n          (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n          query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n          query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n          query.targets[checkStart].reportType !== \"Select Report\"\r\n        ) {\r\n          this.runReport = true;\r\n        }\r\n\r\n        //once all drop downs are selected, run the report.\r\n        if (this.runReport == true) {\r\n            query.targets.forEach((query, index, array)=>{\r\n              let scrutParams = makescrutJSON.createParams( this.scrutInfo, options, query)\r\n              //figure out the intervale time.\r\n              let params = makescrutJSON.findtimeJSON(this.scrutInfo,scrutParams);\r\n              this.doRequest(params).then(response => {\r\n                //store interval here.\r\n                let selectedInterval = response.data[\"report_object\"].dataGranularity.used;\r\n                //set up JSON to go to Scrutinizer API\r\n                let params = makescrutJSON.reportJSON(this.scrutInfo,scrutParams\r\n                );\r\n                this.doRequest(params).then(response => {\r\n                  let formatedData = dataHandler.formatData(\r\n                    response.data,\r\n                    scrutParams,\r\n                    selectedInterval\r\n                  );\r\n\r\n                  datatoGraph.push(formatedData);\r\n                  datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                  numberOfQueries++;\r\n                  //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                  if (numberOfQueries === (array.length)) {\r\n                    return resolve({ data: datatoGraph });\r\n                  }\r\n                });\r\n              });\r\n            });\r\n\r\n        }\r\n      }\r\n  });\r\n  }\r\n\r\n  testDatasource() {\r\n    console.log(\"Running Test\");\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    console.log(\"running find interfaces\");\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(interfaceThings).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(\"running apply filters\");\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n    console.log(\"running get exporters\");\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n\r\n\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  //used to figure out which interfaces to show for a paritcular exporter.\r\n  HandleAdhocFilters(resolve, options) {\r\n    let exporterParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      options.key\r\n    );\r\n    let interfaces = [];\r\n\r\n    this.doRequest(exporterParams).then(exporterResults => {\r\n      let exporterIp = exporterResults[\"data\"][\"results\"][0][\"exporter_ip\"];\r\n      let interfaceParams = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIp\r\n      );\r\n\r\n      this.doRequest(interfaceParams).then(interfaceDetails => {\r\n        let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n        for (let k = 0; k < interfaceList.length; k++) {\r\n          let interfaceName = interfaceList[k][5][\"label\"];\r\n          interfaces.push({\r\n            text: interfaceName\r\n          });\r\n        }\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  addInterfaces(exporterName) {\r\n    //if key is exporter there is no AND, we know we are looking for interfaces on that exporter.\r\n    let interfaces = [];\r\n    let exporterToSearch = exporterName;\r\n    let adhocParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      exporterToSearch\r\n    );\r\n    this.doRequest(adhocParams).then(exporter_details => {\r\n      let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n      let interfacesToSearch = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIpFound\r\n      );\r\n      this.doRequest(interfacesToSearch).then(interfaceDetails => {\r\n        let i = 0;\r\n        let interfaceJson = interfaceDetails.data;\r\n\r\n        if (interfaces.length > 0) {\r\n          interfaces = [];\r\n        }\r\n        for (i = 0; i < interfaceJson.rows.length; i++) {\r\n          //add interfaces to the interface filter options\r\n          interfaces.push(interfaceJson.rows[i][5].label);\r\n        }\r\n\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n  presentOptions(resolve) {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\" },\r\n        { text: \"Device Group\" },\r\n        { text: \"Source IP Filter\" },\r\n        { text: \"Add Port Filter\"}, \r\n        { text: \"Destination IP Filter\" },\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n      \r\n      this.exporters = exporterList;\r\n      return resolve(exporterList);\r\n    });\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.presentOptions(resolve);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    console.log(\"getting tag values\");\r\n\r\n    switch (options.key) {\r\n      case \"Source IP Filter\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve();\r\n        });\r\n      default:\r\n        return new Promise((resolve, reject) => {\r\n          this.HandleAdhocFilters(resolve, options);\r\n        });\r\n    }\r\n  }\r\n}\r\n"]}