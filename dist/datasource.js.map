{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","exporterList","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","numberofExporters","forEach","Promise","resolve","reject","filterObject","sourceIp","exporterDetails","exporterCount","push","adhocParams","findExporter","doRequest","then","exporterIpFound","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","interfaceList","interfaceDetails","interfaceID","exporterInterface","filterDrag","searchStr","interfaceName","exporterName","exporterIp","interfaceId","reportFilter","createFilters","scrutParams","eachQuery","params","findtimeJSON","selectedInterval","response","dataGranularity","used","reportJSON","formatedData","formatData","concat","apply","target","undefined","reportInterface","reportType","j","createParams","unix","reportFilters","reportDisplay","console","log","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","toString","text","interfaceThings","rows","label","refresh","exporterJSON","datasourceRequest","map","replace","scopedVars","refId","report","direction","interface","display","exporterParams","key","interfaces","exporterResults","k","element","index","filerCount","filterCount","exporterToSearch","interfacesToSearch","interfaceJson","presentOptions","HandleAdhocFilters"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACEC,qB,eAAAA,e;AAAiBC,gB,eAAAA,U;;AACjBC,iB,gBAAAA,W;AAAaC,qB,gBAAAA,e;AAAiBC,oB,gBAAAA,c;;;;;;;;;;;;;;;;;;;;;AAEnCC,mB,GAAgB,IAAIL,eAAJ,E;AAChBM,iB,GAAc,IAAIL,UAAJ,E;;mCAELM,iB;AACX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,IAAL,GAAYL,iBAAiBK,IAA7B;AACA,eAAKC,CAAL,GAASL,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKI,aAAL,GAAqBb,WAArB;AACA,eAAKc,gBAAL,GAAwBb,eAAxB;AACA,eAAKC,cAAL,GAAsBA,cAAtB;AACA,eAAKa,eAAL,GAAuBT,iBAAiBS,eAAxC;AACA,eAAKC,SAAL,GAAiB,EAAjB;AACA,eAAKC,OAAL,GAAe,EAAE,gBAAgB,kBAAlB,EAAf;AACA,cACE,OAAOX,iBAAiBY,SAAxB,KAAsC,QAAtC,IACAZ,iBAAiBY,SAAjB,CAA2BC,MAA3B,GAAoC,CAFtC,EAGE;AACA,iBAAKF,OAAL,CAAa,eAAb,IAAgCX,iBAAiBY,SAAjD;AACD;AACD,eAAKE,SAAL,GAAiB,KAAjB;;AAEA,eAAKC,SAAL,GAAiB,EAAjB;;AAEA,eAAKC,OAAL,GAAe,EAAf;;AAEA,eAAKC,SAAL,GAAiB;AACfC,iBAAKlB,iBAAiBkB,GAAjB,GAAuB,uBADb;AAEfC,uBAAWnB,iBAAiBoB,QAAjB,CAA0B,gBAA1B;AAFI,WAAjB;AAIA,eAAKC,YAAL,GAAoB,KAAKA,YAAL,EAApB;AACD;;;;gCAEKC,O,EAAS;AAAA;;AAEb;AACA,gBAAIC,kBAAkB,CAAtB;;AAEA;AACA,gBAAIC,cAAc,EAAlB;;AAEA;AACA,iBAAKV,SAAL,GAAiB,KAAjB;;AAEA;AACA,gBAAIW,QAAQ,KAAKC,oBAAL,CAA0BJ,OAA1B,CAAZ;;AAEA;AACA,iBAAKZ,SAAL,GAAiBe,KAAjB;;AAEAA,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAGA,gBAAIL,MAAME,OAAN,CAAcd,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKP,CAAL,CAAOyB,IAAP,CAAY,EAAEC,MAAM,EAAR,EAAZ,CAAP;AACD;;AAED;AACA,gBAAI,KAAK7B,WAAL,CAAiB8B,eAArB,EAAsC;AACpCR,oBAAMS,YAAN,GAAqB,KAAK/B,WAAL,CAAiB8B,eAAjB,CAAiC,KAAK5B,IAAtC,CAArB;AACD,aAFD,MAEO;AACLoB,oBAAMS,YAAN,GAAqB,EAArB;AACD;;AAED,gBAAIC,aAAaV,MAAME,OAAN,CAAcd,MAAd,GAAuB,CAAxC;AACA;AACA,gBAAIuB,oBAAoB,CAAxB;;AAEA,gBAAIX,MAAMS,YAAN,CAAmBrB,MAAnB,GAA4B,CAAhC,EAAmC;AACjCY,oBAAMS,YAAN,CAAmBG,OAAnB,CAA2B,kBAAU;AACnC,oBAAIT,OAAO,KAAP,MAAkB,kBAAtB,EAA0C;AACxCQ;AACD;AACF,eAJD;;AAMA;AACA,qBAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,oBAAIC,eAAe;AACjBC,4BAAU,EADO;AAEjBC,mCAAiB;AAFA,iBAAnB;;AAKA;AACA,oBAAIC,gBAAgB,CAApB;;AAGAnB,sBAAMS,YAAN,CAAmBG,OAAnB,CAA2B,kBAAU;AACnC,sBAAIT,OAAO,KAAP,MAAkB,kBAAtB,EAA0C;AACxC;AACAa,iCAAaC,QAAb,CAAsBG,IAAtB,CAA2BjB,OAAO,OAAP,CAA3B;AACD,mBAHD,MAGO;AACL;AACA,wBAAIkB,cAAcjD,cAAckD,YAAd,CAChB,MAAK9B,SADW,EAEhBW,OAAO,KAAP,CAFgB,CAAlB;;AAKA,0BAAKoB,SAAL,CAAeF,WAAf,EAA4BG,IAA5B,CAAiC,4BAAoB;AACnD,0BAAIC,kBAAkBC,iBAAiBnB,IAAjB,CAAsBoB,OAAtB,CAA8B,CAA9B,EAAiCC,WAAvD;;AAEA;AACA,0BAAIC,kBAAkBzD,cAAc0D,aAAd,CACpB,MAAKtC,SADe,EAEpBiC,eAFoB,CAAtB;AAIA,4BAAKF,SAAL,CAAeM,eAAf,EAAgCL,IAAhC,CAAqC,4BAAoB;AACvD,4BAAIO,gBAAgBC,iBAAiB,MAAjB,EAAyB,MAAzB,CAApB;AACA;AACAD,sCAAcnB,OAAd,CAAsB,6BAAqB;AACzC,8BAAIqB,cAAcC,kBAAkB,CAAlB,EAAqBC,UAArB,CAAgCC,SAAlD;AACA,8BAAIC,gBAAgBH,kBAAkB,CAAlB,EAAqB,OAArB,CAApB;AACA;AACA,8BAAI/B,OAAO,OAAP,MAAoBkC,aAAxB,EAAuC;AACrCrB,yCAAaE,eAAb,CAA6BE,IAA7B,CAAkC;AAChCkB,4CAAcnC,OAAO,KAAP,CADkB;AAEhCoC,0CAAYd,eAFoB;AAGhCY,6CAAelC,OAAO,OAAP,CAHiB;AAIhCqC,2CAAaP;AAJmB,6BAAlC;AAMD;AACF,yBAZD;;AAcAd;AACA;AACA,4BAAIA,kBAAkBR,iBAAtB,EAAyC;AACvC;AACA,8BAAI8B,eAAe,MAAKC,aAAL,CAAmB1B,YAAnB,CAAnB;;AAEA;AACAhB,gCAAME,OAAN,CAAcU,OAAd,CAAsB,qBAAa;AACjC,gCAAI+B,cAAcvE,cAAcsE,aAAd,CAChB,MAAKlD,SADW,EAEhBK,OAFgB,EAGhB4C,YAHgB,EAIhBG,SAJgB,CAAlB;;AAOA,gCAAIC,SAASzE,cAAc0E,YAAd,CACX,MAAKtD,SADM,EAEXmD,WAFW,CAAb;AAIA;AACA,kCAAKpB,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AACtC,kCAAIuB,mBACFC,SAASzC,IAAT,CAAc,eAAd,EAA+B0C,eAA/B,CAA+CC,IADjD;AAEA;AACA,kCAAIL,SAASzE,cAAc+E,UAAd,CACX,MAAK3D,SADM,EAEXmD,WAFW,CAAb;AAIA;AACA,oCAAKpB,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AACtC;AACA,oCAAI4B,eAAe/E,YAAYgF,UAAZ,CACjBL,SAASzC,IADQ,EAEjBoC,WAFiB,EAGjBI,gBAHiB,CAAnB;;AAMAhD,4CAAYqB,IAAZ,CAAiBgC,YAAjB;AACArD,8CAAc,GAAGuD,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBxD,WAApB,CAAd;AACAD;AACA;AACA,oCAAIA,oBAAoBE,MAAME,OAAN,CAAcd,MAAtC,EAA8C;AAC5C,yCAAO0B,QAAQ,EAAEP,MAAMR,WAAR,EAAR,CAAP;AACD;AACF,+BAfD;AAgBD,6BAzBD;AA0BD,2BAvCD;AAwCD;AACF,uBAjED;AAkED,qBA1ED;AA2ED;AACF,iBAvFD;AAwFD,eAnGM,CAAP;AAoGD,aA5GD,MA4GO;AACL,kBACE,CAACC,MAAME,OAAN,CAAcQ,UAAd,EAA0B8C,MAA1B,KAAqCC,SAArC,IAAkD,iBAAnD,KACAzD,MAAME,OAAN,CAAcQ,UAAd,EAA0BgD,eAA1B,KAA8C,kBAD9C,IAEA1D,MAAME,OAAN,CAAcQ,UAAd,EAA0BxC,eAA1B,KAA8C,kBAF9C,IAGA8B,MAAME,OAAN,CAAcQ,UAAd,EAA0BiD,UAA1B,KAAyC,eAJ3C,EAKE;AACA,qBAAKtE,SAAL,GAAiB,IAAjB;AACD;;AAED;AACA,kBAAI,KAAKA,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,uBAAO,IAAIwB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,6CAC7B6C,CAD6B;AAEpC;AACA,wBAAIjB,cAAcvE,cAAcyF,YAAd,CAChB,MAAKrE,SAAL,CAAe,WAAf,CADgB,EAEhBQ,MAAME,OAAN,CAAc0D,CAAd,EAAiBD,UAFD,EAEa;AAC7B9D,4BAAQ,OAAR,EAAiB,MAAjB,EAAyBiE,IAAzB,EAHgB,EAGiB;AACjCjE,4BAAQ,OAAR,EAAiB,IAAjB,EAAuBiE,IAAvB,EAJgB,EAIe;AAC/B9D,0BAAME,OAAN,CAAc0D,CAAd,EAAiBJ,MALD,EAKS;AACzBxD,0BAAME,OAAN,CAAc0D,CAAd,EAAiB1F,eAND,EAMkB;AAClC8B,0BAAME,OAAN,CAAc0D,CAAd,EAAiBF,eAPD,EAOkB;AAClC1D,0BAAME,OAAN,CAAc0D,CAAd,EAAiBG,aARD,EAQgB;AAChC/D,0BAAME,OAAN,CAAc0D,CAAd,EAAiBI,aATD,CASe;AATf,qBAAlB;AAWA;AACA,wBAAInB,SAASzE,cAAc0E,YAAd,CACX,MAAKtD,SADM,EAEXmD,WAFW,CAAb;;AAKA,0BAAKpB,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AACtC;AACA,0BAAIuB,mBACFC,SAASzC,IAAT,CAAc,eAAd,EAA+B0C,eAA/B,CAA+CC,IADjD;AAEA;AACA,0BAAIL,SAASzE,cAAc+E,UAAd,CACX,MAAK3D,SADM,EAEXmD,WAFW,CAAb;AAIA,4BAAKpB,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AACtC,4BAAI4B,eAAe/E,YAAYgF,UAAZ,CACjBL,SAASzC,IADQ,EAEjBoC,WAFiB,EAGjBI,gBAHiB,CAAnB;;AAMAhD,oCAAYqB,IAAZ,CAAiBgC,YAAjB;AACArD,sCAAc,GAAGuD,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBxD,WAApB,CAAd;;AAEAD;AACA;AACA,4BAAIA,oBAAoBE,MAAME,OAAN,CAAcd,MAAtC,EAA8C;AAC5C,iCAAO0B,QAAQ,EAAEP,MAAMR,WAAR,EAAR,CAAP;AACD;AACF,uBAfD;AAgBD,qBAzBD;AApBoC;;AACtC,uBAAK,IAAI6D,IAAI,CAAb,EAAgBA,IAAI5D,MAAME,OAAN,CAAcd,MAAlC,EAA0CwE,GAA1C,EAA+C;AAAA,0BAAtCA,CAAsC;AA6C9C;AACF,iBA/CM,CAAP;AAgDD;AACF;AACF;;;2CAEgB;AACfK,oBAAQC,GAAR,CAAY,cAAZ;AACA,gBAAIrB,SAASzE,cAAc+F,QAAd,CAAuB,KAAK3E,SAA5B,CAAb;;AAEA,mBAAO,KAAK+B,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AAC7C,kBAAIwB,SAASoB,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,oBAAIpB,SAASzC,IAAT,CAAc8D,OAAd,IAAyB,cAA7B,EAA6C;AAC3C;AACA,yBAAO;AACLD,4BAAQ,QADH;AAELE,qEAA+CtB,SAASzC,IAAT,CAAcgE,GAFxD;AAGLC,2BAAO;AAHF,mBAAP;AAKD,iBAPD,MAOO;AACL;AACA,yBAAO;AACLJ,4BAAQ,SADH;AAELE,6BAAS,wBAFJ;AAGLE,2BAAO;AAHF,mBAAP;AAKD;AACF;AACF,aAlBM,CAAP;AAmBD;;;yCAEc3E,O,EAAS4E,K,EAAO;AAC7BR,oBAAQC,GAAR,CAAY,yBAAZ;AACA,gBAAIlE,QAAQ,KAAKf,SAAjB;;AAEA,gBAAIe,MAAME,OAAV,EAAmB;AACjB;AACA,kBAAIwE,aAAaD,MAAME,IAAN,CAAWnB,MAAX,CAAkBA,MAAnC;;AAEA,kBAAIkB,eAAe,aAAnB,EAAkC;AAChC,oBAAI7B,SAASzE,cAAcwG,SAAd,CACX,KAAKnF,GADM,EAEX,KAAKD,SAAL,CAAe,WAAf,CAFW,CAAb;AAIA;AACA,uBAAO,KAAK+B,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AAC7C,sBAAIqD,IAAI,CAAR;;AAEA,sBAAIlF,WAAWqD,SAASzC,IAAxB;AACA,sBAAIA,OAAO,EAAX;AACA,uBAAKsE,IAAI,CAAT,EAAYA,IAAIlF,SAASP,MAAzB,EAAiCyF,GAAjC,EAAsC;AACpCtE,yBAAKa,IAAL,CAAU;AACR0D,6BAAOnF,SAASkF,CAAT,EAAY,IAAZ,EAAkBE,QAAlB,EADC;AAERC,4BAAMrF,SAASkF,CAAT,EAAY,MAAZ;AAFE,qBAAV;AAID;;AAED,yBAAOtE,IAAP;AACD,iBAbM,CAAP;AAcD,eApBD,MAoBO;AACL;AACA,oBAAI0E,kBAAkB7G,cAAc0D,aAAd,CACpB,KAAKtC,SADe,EAEpBkF,UAFoB,CAAtB;;AAKA,uBAAO,KAAKnD,SAAL,CAAe0D,eAAf,EAAgCzD,IAAhC,CAAqC,oBAAY;AACtD,sBAAIjB,OAAO,CAAC,EAAEyE,MAAM,gBAAR,EAA0BF,OAAO,eAAjC,EAAD,CAAX;AACA,sBAAID,IAAI,CAAR;AACA,sBAAIlF,WAAWqD,SAASzC,IAAxB;;AAEA,uBAAKsE,IAAI,CAAT,EAAYA,IAAIlF,SAASuF,IAAT,CAAc9F,MAA9B,EAAsCyF,GAAtC,EAA2C;AACzCtE,yBAAKa,IAAL,CAAU;AACR0D,6BAAOnF,SAASuF,IAAT,CAAcL,CAAd,EAAiB,CAAjB,EAAoB1C,UAApB,CAA+BC,SAD9B;AAER4C,4BAAMrF,SAASuF,IAAT,CAAcL,CAAd,EAAiB,CAAjB,EAAoBM;AAFlB,qBAAV;AAID;;AAED,yBAAO5E,IAAP;AACD,iBAbM,CAAP;AAcD;AACF;AACF;;;sCAEWkE,K,EAAOW,O,EAAS;AAC1BnB,oBAAQC,GAAR,CAAY,uBAAZ;AACA,iBAAK3E,OAAL,GAAekF,MAAME,IAAN,CAAWnB,MAAX,CAAkBjE,OAAjC;AACA6F,oBAAQA,OAAR;AACD;;;yCAGc;AACbnB,oBAAQC,GAAR,CAAY,uBAAZ;AACA,mBAAO,KAAK5E,SAAZ;AACD;;;yCAEc;AAAA;;AAEb,gBAAIuD,SAASzE,cAAciH,YAAd,CAA2B,KAAK7F,SAAhC,CAAb;AACA,mBAAO,KAAK+B,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AAC7C,kBAAI5B,eAAe,CACjB,EAAEoF,MAAM,eAAR,EAAyBF,OAAO,cAAhC,EADiB,EAEjB,EAAEE,MAAM,cAAR,EAAwBF,OAAO,aAA/B,EAFiB,CAAnB;AAIA,mBAAK,IAAID,IAAI,CAAb,EAAgBA,IAAI7B,SAASzC,IAAT,CAAcnB,MAAlC,EAA0CyF,GAA1C,EAA+C;AAC7CjF,6BAAawB,IAAb,CAAkB;AAChB4D,wBAAMhC,SAASzC,IAAT,CAAcsE,CAAd,EAAiB,MAAjB,CADU;AAEhBC,yBAAO9B,SAASzC,IAAT,CAAcsE,CAAd,EAAiB,IAAjB;AAFS,iBAAlB;AAID;;AAED,qBAAKvF,SAAL,GAAiBM,YAAjB;AACA,qBAAOA,YAAP;AACD,aAdM,CAAP;AAeD;;;oCAESC,O,EAAS;;AAEjBA,oBAAQb,eAAR,GAA0B,KAAKA,eAA/B;AACAa,oBAAQX,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,mBAAO,KAAKT,UAAL,CAAgB6G,iBAAhB,CAAkCzF,OAAlC,CAAP;AACD;;;+CAIoBA,O,EAAS;AAAA;;AAG5BA,oBAAQK,OAAR,GAAkBpC,EAAEqC,MAAF,CAASN,QAAQK,OAAjB,EAA0B,kBAAU;AACpD,qBAAOsD,OAAOA,MAAP,KAAkB,eAAzB;AACD,aAFiB,CAAlB;;AAIA,gBAAItD,UAAUpC,EAAEyH,GAAF,CAAM1F,QAAQK,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLsD,wBAAQ,OAAK9E,WAAL,CAAiB8G,OAAjB,CACNhC,OAAOA,MADD,EAEN3D,QAAQ4F,UAFF,EAGN,OAHM,CADH;AAMLC,uBAAOlC,OAAOkC,KANT;AAOLrF,sBAAMmD,OAAOnD,IAPR;AAQL1B,sBAAM6E,OAAO7E,IAAP,IAAe,WARhB;;AAULgF,4BAAY,OAAKjF,WAAL,CAAiB8G,OAAjB,CACVhC,OAAOmC,MADG,EAEV9F,QAAQ4F,UAFE,EAGV,OAHU,CAVP;;AAgBLvH,iCAAiB,OAAKQ,WAAL,CAAiB8G,OAAjB,CACfhC,OAAOoC,SADQ,EAEf/F,QAAQ4F,UAFO,EAGf,OAHe,CAhBZ;;AAsBL/B,iCAAiB,OAAKhF,WAAL,CAAiB8G,OAAjB,CACfhC,OAAOqC,SAAP,IAAoB,kBADL,EAEfhG,QAAQ4F,UAFO,EAGf,OAHe,CAtBZ;;AA4BL1B,+BAAe,OAAKrF,WAAL,CAAiB8G,OAAjB,CACbhC,OAAOjE,OAAP,IAAkB,WADL,EAEbM,QAAQ4F,UAFK,EAGb,OAHa,CA5BV;;AAkCLzB,+BAAe,OAAKtF,WAAL,CAAiB8G,OAAjB,CACbhC,OAAOsC,OAAP,IAAkB,YADL,EAEbjG,QAAQ4F,UAFK,EAGb,OAHa;AAlCV,eAAP;AAwCD,aAzCa,CAAd;;AA2CA5F,oBAAQK,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOL,OAAP;AACD;;;6CAGkBiB,O,EAASjB,O,EAAS;AAAA;;AACnC,gBAAIkG,iBAAiB3H,cAAckD,YAAd,CACnB,KAAK9B,SADc,EAEnBK,QAAQmG,GAFW,CAArB;AAIA,gBAAIC,aAAa,EAAjB;;AAEA,iBAAK1E,SAAL,CAAewE,cAAf,EAA+BvE,IAA/B,CAAoC,2BAAmB;AACrD,kBAAIe,aAAa2D,gBAAgB,MAAhB,EAAwB,SAAxB,EAAmC,CAAnC,EAAsC,aAAtC,CAAjB;AACA,kBAAIrE,kBAAkBzD,cAAc0D,aAAd,CACpB,OAAKtC,SADe,EAEpB+C,UAFoB,CAAtB;;AAKA,qBAAKhB,SAAL,CAAeM,eAAf,EAAgCL,IAAhC,CAAqC,4BAAoB;AACvD,oBAAIO,gBAAgBC,iBAAiB,MAAjB,EAAyB,MAAzB,CAApB;;AAEA,qBAAK,IAAImE,IAAI,CAAb,EAAgBA,IAAIpE,cAAc3C,MAAlC,EAA0C+G,GAA1C,EAA+C;AAC7C,sBAAIlE,cAAcF,cAAcoE,CAAd,EAAiB,CAAjB,EAAoBhE,UAApB,CAA+BC,SAAjD;AACA,sBAAIC,gBAAgBN,cAAcoE,CAAd,EAAiB,CAAjB,EAAoB,OAApB,CAApB;AACAF,6BAAW7E,IAAX,CAAgB;AACd4D,0BAAM3C;AADQ,mBAAhB;AAGD;AACD,uBAAOvB,QAAQmF,UAAR,CAAP;AACD,eAXD;AAYD,aAnBD;AAoBD;;;wCAEajF,Y,EAAc;AAC1BiD,oBAAQC,GAAR,CAAY,wBAAZ;;AAEA,gBAAIH,gBAAgB,EAApB;;AAEA;AACA,gBAAI/C,aAAaC,QAAb,CAAsB7B,MAAtB,GAA+B,CAAnC,EAAsC;AACpC4B,2BAAaC,QAAb,CAAsBL,OAAtB,CAA8B,UAACwF,OAAD,EAAUC,KAAV,EAAoB;AAChD,oBAAIC,yBAAuBD,KAA3B;AACAtC,8BAAcuC,UAAd,YAAkCF,OAAlC;AACD,eAHD;AAID;AACD;AACApF,yBAAaE,eAAb,CAA6BN,OAA7B,CAAqC,UAACwF,OAAD,EAAUC,KAAV,EAAoB;AAAA,kBACjD9D,UADiD,GACrB6D,OADqB,CACjD7D,UADiD;AAAA,kBACrCC,WADqC,GACrB4D,OADqB,CACrC5D,WADqC;;AAEvD,kBAAI+D,2BAAyBF,KAA7B;;AAEAtC,4BACEwC,WADF,YAEUhE,UAFV,SAEwBA,UAFxB,SAEsCC,WAFtC;AAGD,aAPD;;AASA,mBAAOuB,aAAP;AACD;;;wCAEazB,Y,EAAc;AAAA;;AAC1B;AACA,gBAAI2D,aAAa,EAAjB;AACA,gBAAIO,mBAAmBlE,YAAvB;AACA,gBAAIjB,cAAcjD,cAAckD,YAAd,CAChB,KAAK9B,SADW,EAEhBgH,gBAFgB,CAAlB;AAIA,iBAAKjF,SAAL,CAAeF,WAAf,EAA4BG,IAA5B,CAAiC,4BAAoB;AACnD,kBAAIC,kBAAkBC,iBAAiBnB,IAAjB,CAAsBoB,OAAtB,CAA8B,CAA9B,EAAiCC,WAAvD;AACA,kBAAI6E,qBAAqBrI,cAAc0D,aAAd,CACvB,OAAKtC,SADkB,EAEvBiC,eAFuB,CAAzB;AAIA,qBAAKF,SAAL,CAAekF,kBAAf,EAAmCjF,IAAnC,CAAwC,4BAAoB;AAC1D,oBAAIqD,IAAI,CAAR;AACA,oBAAI6B,gBAAgB1E,iBAAiBzB,IAArC;;AAEA,oBAAI0F,WAAW7G,MAAX,GAAoB,CAAxB,EAA2B;AACzB6G,+BAAa,EAAb;AACD;AACD,qBAAKpB,IAAI,CAAT,EAAYA,IAAI6B,cAAcxB,IAAd,CAAmB9F,MAAnC,EAA2CyF,GAA3C,EAAgD;AAC9C;AACAoB,6BAAW7E,IAAX,CAAgBsF,cAAcxB,IAAd,CAAmBL,CAAnB,EAAsB,CAAtB,EAAyBM,KAAzC;AACD;;AAED,uBAAOrE,QAAQmF,UAAR,CAAP;AACD,eAbD;AAcD,aApBD;AAqBD;;;yCACcnF,O,EAAS;AAAA;;AACtB,gBAAI+B,SAASzE,cAAciH,YAAd,CAA2B,KAAK7F,SAAhC,CAAb;AACA,mBAAO,KAAK+B,SAAL,CAAesB,MAAf,EAAuBrB,IAAvB,CAA4B,oBAAY;AAC7C,kBAAI5B,eAAe,CACjB,EAAEoF,MAAM,eAAR,EADiB,EAEjB,EAAEA,MAAM,cAAR,EAFiB,EAGjB,EAAEA,MAAM,kBAAR,EAHiB,CAAnB;AAKA,mBAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAI7B,SAASzC,IAAT,CAAcnB,MAAlC,EAA0CyF,GAA1C,EAA+C;AAC7CjF,6BAAawB,IAAb,CAAkB;AAChB4D,wBAAMhC,SAASzC,IAAT,CAAcsE,CAAd,EAAiB,MAAjB,CADU;AAEhBC,yBAAO9B,SAASzC,IAAT,CAAcsE,CAAd,EAAiB,IAAjB;AAFS,iBAAlB;AAID;;AAED,qBAAKvF,SAAL,GAAiBM,YAAjB;AACA,qBAAOkB,QAAQlB,YAAR,CAAP;AACD,aAfM,CAAP;AAgBD;;;qCAEUC,O,EAAS;AAAA;;AAClB,mBAAO,IAAIgB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,qBAAK4F,cAAL,CAAoB7F,OAApB;AACD,aAFM,CAAP;AAGD;;;uCAEYjB,O,EAAS;AAAA;;AACpBoE,oBAAQC,GAAR,CAAY,oBAAZ;;AAEA,oBAAQrE,QAAQmG,GAAhB;AACE,mBAAK,kBAAL;AACE,uBAAO,IAAInF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD;AACD,iBAFM,CAAP;AAGF;AACE,uBAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,yBAAK6F,kBAAL,CAAwB9F,OAAxB,EAAiCjB,OAAjC;AACD,iBAFM,CAAP;AANJ;AAUD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata} from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.exporterList = this.exporterList();\r\n  }\r\n\r\n  query(options) {\r\n    \r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n\r\n    //data sent up into this list, it's returned at end.\r\n    let datatoGraph = [];\r\n\r\n    //only run a report if all options are populated, only matter when there are not adhoc filters.\r\n    this.runReport = false;\r\n\r\n    //takes the query and stores it to a variable\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    \r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    //add adhoc filters to the query.\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //counter is used to keep track of number of exporters. This matters for creating the filter ojects\r\n    let numberofExporters = 0;\r\n\r\n    if (query.adhocFilters.length > 0) {\r\n      query.adhocFilters.forEach(filter => {\r\n        if (filter[\"key\"] !== \"Source IP Filter\") {\r\n          numberofExporters++;\r\n        }\r\n      });\r\n\r\n      //start the process of gathering data from scrutinizer. \r\n      return new Promise((resolve, reject) => {\r\n        //filter object used to store data about addtional data about filters needed for Scrutinizer to return data. \r\n        let filterObject = {\r\n          sourceIp: [],\r\n          exporterDetails: []\r\n        };\r\n        \r\n        //this exporter count is compared to the number of exporters to verify we have loops threw everything before returning.\r\n        let exporterCount = 0;\r\n\r\n\r\n        query.adhocFilters.forEach(filter => {\r\n          if (filter[\"key\"] === \"Source IP Filter\") {\r\n            //source IPs are pushed up as an array, will add other filter methods later.\r\n            filterObject.sourceIp.push(filter[\"value\"]);\r\n          } else {\r\n            //in some cases we will be passed the DNS/SNMP name of an exporter, here we convert it to an IP address needed for final filter. \r\n            let adhocParams = makescrutJSON.findExporter(\r\n              this.scrutInfo,\r\n              filter[\"key\"]\r\n            );\r\n\r\n            this.doRequest(adhocParams).then(exporter_details => {\r\n              let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n\r\n              //need to find the interface ID for the interface passed to Scrutinizer.\r\n              let interfaceParams = makescrutJSON.interfaceJSON(\r\n                this.scrutInfo,\r\n                exporterIpFound\r\n              );\r\n              this.doRequest(interfaceParams).then(interfaceDetails => {\r\n                let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n                //for each interface that belongs to a device, we want to compare it against the one selected in grafana. If it matched we can add it to the filters\r\n                interfaceList.forEach(exporterInterface => {\r\n                  let interfaceID = exporterInterface[5].filterDrag.searchStr;\r\n                  let interfaceName = exporterInterface[5][\"label\"];\r\n                  //if selected interface matches and interface in the list, add it to object\r\n                  if (filter[\"value\"] === interfaceName) {\r\n                    filterObject.exporterDetails.push({\r\n                      exporterName: filter[\"key\"],\r\n                      exporterIp: exporterIpFound,\r\n                      interfaceName: filter[\"value\"],\r\n                      interfaceId: interfaceID\r\n                    });\r\n                  }\r\n                });\r\n\r\n                exporterCount++;\r\n                //we have now looped through all the exporters in the filters.\r\n                if (exporterCount === numberofExporters) {\r\n                  //created the filters we need to pass into each gadget on the dashboard.\r\n                  let reportFilter = this.createFilters(filterObject);\r\n\r\n                  //run a query for each gadget on the dashboard.\r\n                  query.targets.forEach(eachQuery => {\r\n                    let scrutParams = makescrutJSON.createFilters(\r\n                      this.scrutInfo,\r\n                      options,\r\n                      reportFilter,\r\n                      eachQuery\r\n                    );\r\n\r\n                    let params = makescrutJSON.findtimeJSON(\r\n                      this.scrutInfo,\r\n                      scrutParams\r\n                    );\r\n                    //find out what interval the data is in, we need to use this later to normalize the graphs.\r\n                    this.doRequest(params).then(response => {\r\n                      let selectedInterval =\r\n                        response.data[\"report_object\"].dataGranularity.used;\r\n                      //set up JSON to go to Scrutinizer API\r\n                      let params = makescrutJSON.reportJSON(\r\n                        this.scrutInfo,\r\n                        scrutParams\r\n                      );\r\n                      //request for report data made to scrutinizer\r\n                      this.doRequest(params).then(response => {\r\n                        //data organized into how Grafana expects it.\r\n                        let formatedData = dataHandler.formatData(\r\n                          response.data,\r\n                          scrutParams,\r\n                          selectedInterval\r\n                        );\r\n\r\n                        datatoGraph.push(formatedData);\r\n                        datatoGraph = [].concat.apply([], datatoGraph);\r\n                        numberOfQueries++;\r\n                        //make sure we have gone through each query in a gadget.\r\n                        if (numberOfQueries === query.targets.length) {\r\n                          return resolve({ data: datatoGraph });\r\n                        }\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      if (\r\n        (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n        query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n        query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n        query.targets[checkStart].reportType !== \"Select Report\"\r\n      ) {\r\n        this.runReport = true;\r\n      }\r\n\r\n      //once all drop downs are selected, run the report.\r\n      if (this.runReport == true) {\r\n        return new Promise((resolve, reject) => {\r\n          for (let j = 0; j < query.targets.length; j++) {\r\n            //grab the parameters to from the query.\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.scrutInfo[\"authToken\"],\r\n              query.targets[j].reportType, //report type\r\n              options[\"range\"][\"from\"].unix(), //start time\r\n              options[\"range\"][\"to\"].unix(), //end time\r\n              query.targets[j].target, //ip address\r\n              query.targets[j].reportDirection, //report direction\r\n              query.targets[j].reportInterface, // exporter Interface\r\n              query.targets[j].reportFilters, // filerts\r\n              query.targets[j].reportDisplay // bits or percent\r\n            );\r\n            //figure out the intervale time.\r\n            let params = makescrutJSON.findtimeJSON(\r\n              this.scrutInfo,\r\n              scrutParams\r\n            );\r\n\r\n            this.doRequest(params).then(response => {\r\n              //store interval here.\r\n              let selectedInterval =\r\n                response.data[\"report_object\"].dataGranularity.used;\r\n              //set up JSON to go to Scrutinizer API\r\n              let params = makescrutJSON.reportJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  selectedInterval\r\n                );\r\n\r\n                datatoGraph.push(formatedData);\r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                numberOfQueries++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (numberOfQueries === query.targets.length) {\r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    console.log(\"Running Test\");\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    console.log(\"running find interfaces\");\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(interfaceThings).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(\"running apply filters\");\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n    console.log(\"running get exporters\");\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n\r\n\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  //used to figure out which interfaces to show for a paritcular exporter.\r\n  HandleAdhocFilters(resolve, options) {\r\n    let exporterParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      options.key\r\n    );\r\n    let interfaces = [];\r\n\r\n    this.doRequest(exporterParams).then(exporterResults => {\r\n      let exporterIp = exporterResults[\"data\"][\"results\"][0][\"exporter_ip\"];\r\n      let interfaceParams = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIp\r\n      );\r\n\r\n      this.doRequest(interfaceParams).then(interfaceDetails => {\r\n        let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n        for (let k = 0; k < interfaceList.length; k++) {\r\n          let interfaceID = interfaceList[k][5].filterDrag.searchStr;\r\n          let interfaceName = interfaceList[k][5][\"label\"];\r\n          interfaces.push({\r\n            text: interfaceName\r\n          });\r\n        }\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n\r\n  createFilters(filterObject) {\r\n    console.log(\"running create filters\");\r\n\r\n    let reportFilters = {};\r\n\r\n    //if there are ip addres filters, add them\r\n    if (filterObject.sourceIp.length > 0) {\r\n      filterObject.sourceIp.forEach((element, index) => {\r\n        let filerCount = `sdfIps_${index}`;\r\n        reportFilters[filerCount] = `in_${element}_src`;\r\n      });\r\n    }\r\n    //there will always be exporter filters, add them.\r\n    filterObject.exporterDetails.forEach((element, index) => {\r\n      let { exporterIp, interfaceId } = element;\r\n      let filterCount = `sdfDips_${index}`;\r\n\r\n      reportFilters[\r\n        filterCount\r\n      ] = `in_${exporterIp}_${exporterIp}-${interfaceId}`;\r\n    });\r\n\r\n    return reportFilters;\r\n  }\r\n\r\n  addInterfaces(exporterName) {\r\n    //if key is exporter there is no AND, we know we are looking for interfaces on that exporter.\r\n    let interfaces = [];\r\n    let exporterToSearch = exporterName;\r\n    let adhocParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      exporterToSearch\r\n    );\r\n    this.doRequest(adhocParams).then(exporter_details => {\r\n      let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n      let interfacesToSearch = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIpFound\r\n      );\r\n      this.doRequest(interfacesToSearch).then(interfaceDetails => {\r\n        let i = 0;\r\n        let interfaceJson = interfaceDetails.data;\r\n\r\n        if (interfaces.length > 0) {\r\n          interfaces = [];\r\n        }\r\n        for (i = 0; i < interfaceJson.rows.length; i++) {\r\n          //add interfaces to the interface filter options\r\n          interfaces.push(interfaceJson.rows[i][5].label);\r\n        }\r\n\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n  presentOptions(resolve) {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\" },\r\n        { text: \"Device Group\" },\r\n        { text: \"Source IP Filter\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return resolve(exporterList);\r\n    });\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.presentOptions(resolve);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    console.log(\"getting tag values\");\r\n\r\n    switch (options.key) {\r\n      case \"Source IP Filter\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve();\r\n        });\r\n      default:\r\n        return new Promise((resolve, reject) => {\r\n          this.HandleAdhocFilters(resolve, options);\r\n        });\r\n    }\r\n  }\r\n}\r\n"]}