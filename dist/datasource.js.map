{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authToken","jsonData","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","options","k","datatoGraph","query","buildQueryParameters","console","log","targets","filter","t","hide","target","undefined","when","data","getAdhocFilters","adhocFilters","checkStart","reportInterface","reportType","Promise","resolve","reject","j","scrutParams","createParams","unix","reportFilters","intervalTime","findtimeJSON","doRequest","method","params","then","response","selectedInterval","dataGranularity","used","scrutinizerJSON","reportJSON","formatedData","formatData","push","concat","apply","rm","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","toString","text","interfaceJSON","rows","filterDrag","searchStr","label","refresh","refId","exporterJSON","exporterList","result","map","d","isObject","datasourceRequest","replace","scopedVars","report","direction","interface"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata } from \"./reportData\";\r\nimport { reportTypes, reportDirection } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\";\r\n    this.authToken = instanceSettings.jsonData[\"scrutinizerKey\"];\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n  }\r\n\r\n  query(options) {\r\n    let k = 0;\r\n    let datatoGraph = [];\r\n\r\n    this.runReport = false;\r\n\r\n    var query = this.buildQueryParameters(options);\r\n    console.log(query)\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets[0].target === undefined) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //make sure use has selected all of drop downs before running report\r\n    if (\r\n      (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n      query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n      query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n      query.targets[checkStart].reportType !== \"Select Report\"\r\n    ) {\r\n      this.runReport = true;\r\n    }\r\n    //once all drop downs are selected, run the report.\r\n    if (this.runReport == true) {\r\n      return new Promise((resolve, reject) => {\r\n        for (let j = 0; j < query.targets.length; j++) {\r\n          //grab the parameters to from the query.\r\n          let scrutParams = makescrutJSON.createParams(\r\n            this.authToken,\r\n            query.targets[j].reportType, //report type\r\n            options[\"range\"][\"from\"].unix(), //start time\r\n            options[\"range\"][\"to\"].unix(), //end time\r\n            query.targets[j].target, //ip address\r\n            query.targets[j].reportDirection, //report direction\r\n            query.targets[j].reportInterface, // exporter Interface\r\n            query.targets[j].reportFilters // filerts\r\n          );\r\n          //figure out the intervale time.\r\n          let intervalTime = makescrutJSON.findtimeJSON(scrutParams);\r\n\r\n          console.log(scrutParams)\r\n\r\n          this.doRequest({\r\n            url: `${this.url}`,\r\n            method: \"GET\",\r\n            params: intervalTime\r\n          }).then(response => {\r\n            console.log(response)\r\n            //store interval here.\r\n            let selectedInterval =\r\n              response.data[\"report_object\"].dataGranularity.used;\r\n            //set up JSON to go to Scrutinizer API\r\n            let scrutinizerJSON = makescrutJSON.reportJSON(scrutParams);\r\n\r\n            // let scrutDirection = query.targets[j].reportDirection;\r\n\r\n            this.doRequest({\r\n              url: `${this.url}`,\r\n              method: \"GET\",\r\n              params: scrutinizerJSON\r\n            }).then(response => {\r\n              let formatedData = dataHandler.formatData(\r\n                response.data,\r\n                scrutParams.reportDirection,\r\n                selectedInterval\r\n              );\r\n\r\n              datatoGraph.push(formatedData);\r\n              datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n              k++;\r\n              //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n              if (k === query.targets.length) {\r\n                return resolve({ data: datatoGraph });\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: `${this.url}`,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"licensing\",\r\n        authToken: `${this.authToken}`\r\n      }\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets[0].target != undefined) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if(selectedIP === 'deviceGroup'){\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.authToken\r\n        )\r\n\r\n        return this.doRequest(params).then(response=>{\r\n          let i = 0\r\n          \r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i=0; i < jsonData.length; i++){\r\n            data.push({\r\n              value:jsonData[i]['id'].toString(),\r\n              text:jsonData[i]['name']\r\n            })\r\n\r\n          }\r\n\r\n          return data;\r\n        })\r\n      }else{\r\n      \r\n        let params = makescrutJSON.interfaceJSON(\r\n          this.url,\r\n          this.authToken,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(params).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });}\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  getExporters(query, scope) {\r\n    if (scope.ctrl.target.refId === \"A\" && query === \"\") {\r\n      let params = makescrutJSON.exporterJSON(this.url, this.authToken);\r\n      \r\n      return this.doRequest(params).then(response => {\r\n        let exporterList = [\r\n          { text: \"All Exporters\", value: \"allExporters\" },\r\n          { text: \"Device Group\", value: \"deviceGroup\" }];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n          exporterList.push({\r\n            text: response.data[i][\"name\"],\r\n            value: response.data[i][\"ip\"]\r\n          });\r\n        }\r\n\r\n        this.exporters = exporterList;\r\n        return exporterList;\r\n      });\r\n    } else {\r\n      return this.exporters;\r\n    }\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, (d, i) => {\r\n      if (d && d.text && d.value) {\r\n        return { text: d.text, value: d.value };\r\n      } else if (_.isObject(d)) {\r\n        return { text: d, value: i };\r\n      }\r\n\r\n      return { text: d, value: d };\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n}\r\n"]}