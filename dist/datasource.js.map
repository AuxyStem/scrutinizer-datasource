{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authToken","jsonData","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","exporterList","options","k","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","target","undefined","when","data","getAdhocFilters","adhocFilters","checkStart","exporter_name","interface_name","params","findExporter","doRequest","then","exporter_details","exporter_ip","results","interfaceJSON","response","text","value","i","rows","push","filterDrag","searchStr","label","console","log","reportInterface","reportType","Promise","resolve","reject","j","scrutParams","createParams","unix","reportFilters","reportDisplay","intervalTime","findtimeJSON","method","selectedInterval","dataGranularity","used","scrutinizerJSON","reportJSON","formatedData","formatData","concat","apply","rm","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","toString","refresh","refId","exporterJSON","datasourceRequest","map","replace","scopedVars","report","direction","interface","display","key","adhocFiltersInterfaces"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata } from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\";\r\n    this.authToken = instanceSettings.jsonData[\"scrutinizerKey\"];\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n\r\n    this.exporterList = this.exporterList()\r\n\r\n  }\r\n\r\n  query(options) {\r\n\r\n\r\n    let k = 0;\r\n    let datatoGraph = [];\r\n\r\n\r\n    this.runReport = false;\r\n\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets[0].target === undefined) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n\r\n\r\n    let checkStart = query.targets.length - 1;\r\n\r\n\r\n    //check if there are ad-hoc filters added.\r\n    if (query.adhocFilters.length > 0) {\r\n      //save exporter export name to variable. \r\n      let exporter_name = query.adhocFilters[0]['key']\r\n      let interface_name = query.adhocFilters[0]['value']\r\n\r\n      if ((exporter_name != \"Device Group\") && (exporter_name != \"All Exporters\")) {\r\n        let params = makescrutJSON.findExporter(this.url, this.authToken, exporter_name)\r\n        this.doRequest(params).then((exporter_details) => {\r\n          let exporter_ip = exporter_details.data.results[0].exporter_ip\r\n          let params = makescrutJSON.interfaceJSON(this.url, this.authToken, exporter_ip)\r\n          this.doRequest(params).then((response)=>{\r\n            let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n            let i = 0;\r\n            let jsonData = response.data;\r\n  \r\n            for (i = 0; i < jsonData.rows.length; i++) {\r\n              data.push({\r\n                value: jsonData.rows[i][5].filterDrag.searchStr,\r\n                text: jsonData.rows[i][5].label\r\n              });\r\n\r\n              if (interface_name ===jsonData.rows[i][5].label ){\r\n                console.log(jsonData.rows[i][5].filterDrag.searchStr)\r\n              }\r\n            }\r\n  \r\n\r\n          })\r\n        })\r\n\r\n      }\r\n\r\n\r\n    }\r\n    else {\r\n\r\n\r\n      if (\r\n        (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n        query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n        query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n        query.targets[checkStart].reportType !== \"Select Report\"\r\n      ) {\r\n        this.runReport = true;\r\n      }\r\n\r\n\r\n      //once all drop downs are selected, run the report.\r\n      if (this.runReport == true) {\r\n        return new Promise((resolve, reject) => {\r\n          for (let j = 0; j < query.targets.length; j++) {\r\n            //grab the parameters to from the query.\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.authToken,\r\n              query.targets[j].reportType, //report type\r\n              options[\"range\"][\"from\"].unix(), //start time\r\n              options[\"range\"][\"to\"].unix(), //end time\r\n              query.targets[j].target, //ip address\r\n              query.targets[j].reportDirection, //report direction\r\n              query.targets[j].reportInterface, // exporter Interface\r\n              query.targets[j].reportFilters, // filerts\r\n              query.targets[j].reportDisplay // bits or percent\r\n            );\r\n            //figure out the intervale time.\r\n            let intervalTime = makescrutJSON.findtimeJSON(scrutParams);\r\n\r\n\r\n\r\n            this.doRequest({\r\n              url: `${this.url}`,\r\n              method: \"GET\",\r\n              params: intervalTime\r\n\r\n            }).then(response => {\r\n\r\n              //store interval here.\r\n              let selectedInterval =\r\n                response.data[\"report_object\"].dataGranularity.used;\r\n              //set up JSON to go to Scrutinizer API\r\n              let scrutinizerJSON = makescrutJSON.reportJSON(scrutParams);\r\n\r\n\r\n\r\n              this.doRequest({\r\n                url: `${this.url}`,\r\n                method: \"GET\",\r\n                params: scrutinizerJSON\r\n              }).then(response => {\r\n\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  selectedInterval\r\n                );\r\n\r\n                datatoGraph.push(formatedData);\r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                k++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (k === query.targets.length) {\r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: `${this.url}`,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"licensing\",\r\n        authToken: `${this.authToken}`\r\n      }\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    let query = this.liveQuery;\r\n\r\n\r\n    if (query.targets[0].target != undefined) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === 'deviceGroup') {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.authToken\r\n        )\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n\r\n          let i = 0\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i]['id'].toString(),\r\n              text: jsonData[i]['name']\r\n            })\r\n\r\n          }\r\n\r\n          return data;\r\n        })\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device. \r\n        let params = makescrutJSON.interfaceJSON(\r\n          this.url,\r\n          this.authToken,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(params).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters(query, scope) {\r\n    if (scope.ctrl.target.refId === \"A\" && query === \"\") {\r\n      let params = makescrutJSON.exporterJSON(this.url, this.authToken);\r\n\r\n      return this.doRequest(params).then(response => {\r\n        let exporterList = [\r\n          { text: \"All Exporters\", value: \"allExporters\" },\r\n          { text: \"Device Group\", value: \"deviceGroup\" }];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n          exporterList.push({\r\n            text: response.data[i][\"name\"],\r\n            value: response.data[i][\"ip\"]\r\n          });\r\n        }\r\n\r\n        this.exporters = exporterList;\r\n        return exporterList;\r\n      });\r\n    } else {\r\n      return this.exporters;\r\n    }\r\n  }\r\n\r\n  exporterList() {\r\n    let params = makescrutJSON.exporterJSON(this.url, this.authToken);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    })\r\n  }\r\n\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function. \r\n  buildQueryParameters(options) {\r\n\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n\r\n\r\n  getTagKeys(options) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let params = makescrutJSON.exporterJSON(this.url, this.authToken);\r\n      this.doRequest(params).then(response => {\r\n        let exporterList = [\r\n          { text: \"All Exporters\", value: \"allExporters\" },\r\n          { text: \"Device Group\", value: \"deviceGroup\" }];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n          exporterList.push({\r\n            text: response.data[i][\"name\"],\r\n            value: response.data[i][\"ip\"]\r\n          });\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return resolve(exporterList)\r\n      });\r\n\r\n    })\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  getTagValues(options) {\r\n    let selectedIP = options.key\r\n\r\n    if (selectedIP === 'Device Group') {\r\n      let params = makescrutJSON.groupJSON(\r\n        this.url,\r\n        this.authToken\r\n      )\r\n      //if user selects Device Group we return a list of all groups available.\r\n      return this.doRequest(params).then(response => {\r\n\r\n        let i = 0\r\n\r\n        let jsonData = response.data;\r\n        let data = [];\r\n        for (i = 0; i < jsonData.length; i++) {\r\n          data.push({\r\n            value: jsonData[i]['id'].toString(),\r\n            text: jsonData[i]['name']\r\n          })\r\n\r\n        }\r\n\r\n        this.adhocFiltersInterfaces = data\r\n        return data;\r\n      })\r\n    } else {\r\n      //otherwise we figre out what interfaces are available for selected device. \r\n      let params = makescrutJSON.interfaceJSON(\r\n        this.url,\r\n        this.authToken,\r\n        selectedIP\r\n      );\r\n\r\n      return this.doRequest(params).then(response => {\r\n\r\n        let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n        let i = 0;\r\n        let jsonData = response.data;\r\n\r\n        for (i = 0; i < jsonData.rows.length; i++) {\r\n          data.push({\r\n            value: jsonData.rows[i][5].filterDrag.searchStr,\r\n            text: jsonData.rows[i][5].label\r\n          });\r\n        }\r\n\r\n\r\n        return data;\r\n      });\r\n    }\r\n  }\r\n}"]}