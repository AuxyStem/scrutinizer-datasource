{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","$http","type","url","authToken","jsonData","name","q","http","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","options","k","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","target","undefined","when","data","getAdhocFilters","adhocFilters","checkStart","reportInterface","reportType","Promise","resolve","reject","j","intervalTime","findtimeJSON","unix","reportFilters","doRequest","method","params","then","selectedInterval","response","dataGranularity","used","scrutinizerJSON","reportJSON","scrutDirection","formatedData","formatData","push","concat","apply","rm","status","message","title","scope","selectedIP","ctrl","action","view","session_state","client_time_zone","order_by","search","column","value","comparison","filterType","_key","query_limit","offset","max_num_rows","hostDisplayType","text","l","rows","filterDrag","searchStr","label","refresh","console","log","refId","exporterList","i","result","map","d","isObject","datasourceRequest","replace","scopedVars","report","direction","interface"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport {\r\n  ScrutinizerJSON,\r\n  Handledata\r\n} from \"./reportData\";\r\nimport { reportTypes, reportDirection } from \"./reportTypes\";\r\n\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv, $http, ) {\r\n    \r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\";\r\n    this.authToken = instanceSettings.jsonData[\"scrutinizerKey\"];\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.http = $http;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false\r\n\r\n    this.exporters = []\r\n\r\n    this.filters = ''\r\n\r\n   \r\n  }\r\n\r\n  query(options) {\r\n    \r\n    let k = 0\r\n    let datatoGraph = []\r\n    \r\n    this.runReport = false\r\n\r\n    \r\n    var query = this.buildQueryParameters(options);\r\n    \r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n\r\n    if (query.targets[0].target === undefined) {\r\n      \r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n\r\n\r\n    let checkStart = query.targets.length - 1\r\n    \r\n\r\n      \r\n      if (\r\n        (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n        query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n        query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n        query.targets[checkStart].reportType !== \"Select Report\"\r\n      ) { \r\n        this.runReport = true\r\n      }\r\n    \r\n      \r\n    if (this.runReport == true) {\r\n\r\n      return new Promise((resolve, reject)=>{\r\n      \r\n\r\n    \r\n      for (let j = 0; j < query.targets.length; j++) {\r\n\r\n        let intervalTime = makescrutJSON.findtimeJSON(\r\n          this.authToken,\r\n          query.targets[j].reportType, //report type\r\n          options[\"range\"][\"from\"].unix(), //start time\r\n          options[\"range\"][\"to\"].unix(), //end time\r\n          query.targets[j].target, //ip address\r\n          query.targets[j].reportDirection, //report direction\r\n          query.targets[j].reportInterface, // exporter Interface\r\n          query.targets[j].reportFilters\r\n        )\r\n\r\n\r\n        this.doRequest({\r\n          url: `${this.url}`,\r\n          method: \"GET\",\r\n          params: intervalTime\r\n        }).then(response => {\r\n          let selectedInterval = response.data[\"report_object\"].dataGranularity.used;\r\n\r\n          \r\n\r\n          let scrutinizerJSON = makescrutJSON.reportJSON(\r\n            this.authToken,\r\n            query.targets[j].reportType, //report type\r\n            options[\"range\"][\"from\"].unix(), //start time\r\n            options[\"range\"][\"to\"].unix(), //end time\r\n            query.targets[j].target, //ip address\r\n            query.targets[j].reportDirection, //report direction\r\n            query.targets[j].reportInterface, // exporter Interface\r\n            query.targets[j].reportFilters\r\n          );\r\n\r\n          let scrutDirection = query.targets[j].reportDirection;\r\n\r\n          this.doRequest({\r\n            url: `${this.url}`,\r\n            method: \"GET\",\r\n            params: scrutinizerJSON\r\n          }).then(response => {\r\n\r\n            let formatedData = dataHandler.formatData(\r\n              response.data,\r\n              scrutDirection,\r\n              selectedInterval\r\n            );\r\n\r\n            \r\n\r\n\r\n            datatoGraph.push(formatedData);\r\n            datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n            k++;\r\n\r\n            if (k === query.targets.length ) {\r\n              \r\n              return resolve({ data: datatoGraph });\r\n            }\r\n\r\n          });\r\n        \r\n        \r\n      \r\n      })\r\n      }\r\n    \r\n    })\r\n    \r\n    }\r\n    }\r\n\r\n  \r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: `${this.url}`,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"licensing\",\r\n        authToken: `${this.authToken}`\r\n      }\r\n    }).then(response => {\r\n\r\n      if (response.status === 200) {\r\n        return {\r\n          status: \"success\",\r\n          message: \"Data source is working\",\r\n          title: \"Success\"\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    \r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets[0].target != undefined) {\r\n      //determins which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n      return this.doRequest({\r\n        url: `${this.url}`,\r\n        method: \"GET\",\r\n        params: {\r\n          rm: \"status\",\r\n          action: \"get\",\r\n          view: \"topInterfaces\",\r\n          authToken: `${this.authToken}`,\r\n          session_state: {\r\n            client_time_zone: \"America/New_York\",\r\n            order_by: [],\r\n            search: [\r\n              {\r\n                column: \"exporter_search\",\r\n                value: `${selectedIP}`,\r\n                comparison: \"like\",\r\n                data: { filterType: \"multi_string\" },\r\n                _key: `exporter_search_like_${selectedIP}`\r\n              }\r\n            ],\r\n            query_limit: { offset: 0, max_num_rows: 50 },\r\n            hostDisplayType: \"dns\"\r\n          }\r\n        }\r\n      }).then(response => {\r\n        let data = [{text:\"All Interfaces\", value:\"allInterfaces\"}];\r\n        let l = 0;\r\n        let jsonData = response.data;\r\n        for (l = 0; l < jsonData.rows.length; l++) {\r\n          data.push({\r\n            value: jsonData.rows[l][5].filterDrag.searchStr,\r\n            text: jsonData.rows[l][5].label\r\n          });\r\n        }\r\n\r\n        return data;\r\n      });\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(scope)\r\n    this.filters = scope.ctrl.target.filters\r\n    refresh.refresh()\r\n  }\r\n\r\n  getExporters(query, scope) {\r\n    console.log(scope)\r\n\r\n    if (scope.ctrl.target.refId === \"A\" && query === ''){\r\n    return this.doRequest({\r\n      url: `${this.url}`,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"get_known_objects\",\r\n        type: \"devices\",\r\n        authToken: `${this.authToken}`\r\n      }\r\n    }).then(response => {\r\n      let exporterList = [{text:\"All Exporters\", value:\"allExporters\"}]\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList\r\n      return exporterList;\r\n    });\r\n  } else {\r\n    \r\n    return this.exporters\r\n  }\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, (d, i) => {\r\n      if (d && d.text && d.value) {\r\n        return { text: d.text, value: d.value };\r\n      } else if (_.isObject(d)) {\r\n        return { text: d, value: i };\r\n      }\r\n\r\n      return { text: d, value: d };\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n\r\n    console.log(options)\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n}\r\n"]}