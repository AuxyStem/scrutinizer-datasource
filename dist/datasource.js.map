{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","HandleAdhoc","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","console","log","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","interfaces","exporterList","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","exporterName","interfaceName","adhocParams","findExporter","exporterObject","exporterIp","interfaceId","Promise","resolve","reject","doRequest","then","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","i","interfaceJson","interfaceDetails","rows","label","push","text","filterDrag","searchStr","j","scrutParams","createParams","reportType","unix","reportFilters","reportDisplay","params","findtimeJSON","selectedInterval","response","dataGranularity","used","reportJSON","formatedData","formatData","concat","apply","target","undefined","reportInterface","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","value","toString","interfaceThings","refresh","exporterJSON","datasourceRequest","map","replace","scopedVars","refId","report","direction","interface","display","key"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata, HandleAdhoc } from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    console.log(\"running Constructor\");\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.interfaces = [];\r\n    this.exporterList = this.exporterList();\r\n  }\r\n\r\n  query(options) {\r\n    console.log(\"running query\");\r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n    let datatoGraph = [];\r\n\r\n    //only run a report if all options are populated\r\n    this.runReport = false;\r\n\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    //add adhoc filters to the query.\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n\r\n    //check if there are ad-hoc filters added.\r\n    if (query.adhocFilters.length > 0) {\r\n      //store the exporter that was selected\r\n      const exporterName = query.adhocFilters[0][\"value\"];\r\n      //store the interface that was selected\r\n      const interfaceName = query.adhocFilters[1][\"value\"];\r\n      //create params to find the exporter details\r\n      const adhocParams = makescrutJSON.findExporter(\r\n        this.scrutInfo,\r\n        exporterName\r\n      );\r\n      //object needed to make request for Scrutinizer data.\r\n      const exporterObject = {\r\n        exporterIp: \"\",\r\n        interfaceId: \"\"\r\n      };\r\n      if (adhocParams) {\r\n        return new Promise((resolve, reject) => {\r\n          this.doRequest(adhocParams)\r\n            .then(exporter_details => {\r\n              //set IP addres for the exporter\r\n              exporterObject.exporterIp = exporter_details.data.results[0].exporter_ip;\r\n              //find interfaces for that exporter.\r\n              let interfaceParams = makescrutJSON.interfaceJSON(this.scrutInfo,exporterObject.exporterIp);\r\n                this.doRequest(interfaceParams)\r\n                    .then(interfaceDetails => {\r\n                      let i = 0;\r\n                      let interfaceJson = interfaceDetails.data;\r\n                      console.log(interfaceJson)\r\n                      console.log(exporterObject[\"interfaceId\"])\r\n                      console.log(interfaceName)\r\n                      \r\n                      if(this.interfaces.length >0){\r\n                        this.interfaces = []\r\n                      }\r\n                      for (i = 0; i < interfaceJson.rows.length; i++) {\r\n                        console.log(interfaceJson.rows[i][5].label)\r\n                        //add interfaces to the interface filter options\r\n                        this.interfaces.push({ text: interfaceJson.rows[i][5].label });\r\n                        \r\n                        if (interfaceName === interfaceJson.rows[i][5].label) {\r\n                          exporterObject.interfaceId =\r\n                            interfaceJson.rows[i][5].filterDrag.searchStr;\r\n                        }\r\n                      }\r\n\r\n                      for (let j = 0; j < query.targets.length; j++) {\r\n                        //grab the parameters to from the query.\r\n                        let scrutParams = makescrutJSON.createParams(\r\n                          this.scrutInfo[\"authToken\"],\r\n                          query.targets[j].reportType, //report type\r\n                          options[\"range\"][\"from\"].unix(), //start time\r\n                          options[\"range\"][\"to\"].unix(), //end time\r\n                          exporterObject[\"exporterIp\"], //ip address\r\n                          query.targets[j].reportDirection, //report direction\r\n                          exporterObject[\"interfaceId\"], // exporter Interface\r\n                          query.targets[j].reportFilters, // filerts\r\n                          query.targets[j].reportDisplay // bits or percent\r\n                        );\r\n                        //figure out the intervale time.\r\n                        let params = makescrutJSON.findtimeJSON(\r\n                          this.scrutInfo,\r\n                          scrutParams\r\n                        );\r\n\r\n                        this.doRequest(params).then(response => {\r\n                          //store interval here.\r\n                          let selectedInterval =\r\n                            response.data[\"report_object\"].dataGranularity.used;\r\n                          //set up JSON to go to Scrutinizer API\r\n                          let params = makescrutJSON.reportJSON(\r\n                            this.scrutInfo,\r\n                            scrutParams\r\n                          );\r\n                          this.doRequest(params).then(response => {\r\n                            let formatedData = dataHandler.formatData(\r\n                              response.data,\r\n                              scrutParams,\r\n                              selectedInterval\r\n                            );\r\n\r\n                            datatoGraph.push(formatedData);\r\n                            datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                            numberOfQueries++;\r\n\r\n                            //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                            if (numberOfQueries === query.targets.length) {\r\n                              return resolve({ data: datatoGraph });\r\n                            }\r\n                          });\r\n                        });\r\n                      }\r\n                    });\r\n                  });\r\n            });\r\n          }\r\n    } else {\r\n      if (\r\n        (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n        query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n        query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n        query.targets[checkStart].reportType !== \"Select Report\"\r\n      ) {\r\n        this.runReport = true;\r\n      }\r\n\r\n      //once all drop downs are selected, run the report.\r\n      if (this.runReport == true) {\r\n        return new Promise((resolve, reject) => {\r\n          for (let j = 0; j < query.targets.length; j++) {\r\n            //grab the parameters to from the query.\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.scrutInfo[\"authToken\"],\r\n              query.targets[j].reportType, //report type\r\n              options[\"range\"][\"from\"].unix(), //start time\r\n              options[\"range\"][\"to\"].unix(), //end time\r\n              query.targets[j].target, //ip address\r\n              query.targets[j].reportDirection, //report direction\r\n              query.targets[j].reportInterface, // exporter Interface\r\n              query.targets[j].reportFilters, // filerts\r\n              query.targets[j].reportDisplay // bits or percent\r\n            );\r\n            //figure out the intervale time.\r\n            let params = makescrutJSON.findtimeJSON(\r\n              this.scrutInfo,\r\n              scrutParams\r\n            );\r\n\r\n            this.doRequest(params).then(response => {\r\n              //store interval here.\r\n              let selectedInterval =\r\n                response.data[\"report_object\"].dataGranularity.used;\r\n              //set up JSON to go to Scrutinizer API\r\n              let params = makescrutJSON.reportJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  selectedInterval\r\n                );\r\n\r\n                datatoGraph.push(formatedData);\r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                numberOfQueries++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (numberOfQueries === query.targets.length) {\r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    console.log(\"Running Test\");\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n    console.log(params);\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    console.log(\"running find interfaces\");\r\n    let query = this.liveQuery;\r\n\r\n    if (query) console.log(query);\r\n    if (query.targets) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n        console.log(interfaceThings);\r\n\r\n        return this.doRequest(interfaceThings).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(\"running apply filters\");\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n    console.log(\"running get exporters\");\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n    console.log(\"running exporterlist\");\r\n\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    console.log(\"running do request\");\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n \r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n    console.log(\"running build query\");\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    console.log(\"running get tag eys\");\r\n    return new Promise((resolve, reject) => {\r\n      return resolve([{ text: \"Exporter\" }, { text: \"Interface\" }]);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    console.log(options);\r\n    if (options.key === \"Exporter\") {\r\n      return new Promise((resolve, reject) => {\r\n        return resolve(this.exporterList);\r\n      });\r\n    } else if (options.key === \"Interface\") {\r\n      return new Promise((resolve, reject) => {\r\n        console.log(this.interfaces);\r\n        resolve(this.interfaces);\r\n      });\r\n    }\r\n  }\r\n\r\n  // let selectedIP = options.key;\r\n\r\n  // if (selectedIP === \"Device Group\") {\r\n  //   let params = makescrutJSON.groupJSON(this.url, this.scrutInfo['authToken']);\r\n  //   //if user selects Device Group we return a list of all groups available.\r\n  //   return this.doRequest(params).then(response => {\r\n  //     let i = 0;\r\n\r\n  //     let jsonData = response.data;\r\n  //     let data = [];\r\n  //     for (i = 0; i < jsonData.length; i++) {\r\n  //       data.push({\r\n  //         value: jsonData[i][\"id\"].toString(),\r\n  //         text: jsonData[i][\"name\"]\r\n  //       });\r\n  //     }\r\n\r\n  //     this.adhocFiltersInterfaces = data;\r\n  //     return data;\r\n  //   });\r\n  // } else {\r\n  //   //otherwise we figre out what interfaces are available for selected device.\r\n  //   let params = makescrutJSON.interfaceJSON(\r\n  //     this.scrutInfo,\r\n  //     selectedIP\r\n  //   );\r\n\r\n  //   return this.doRequest(params).then(response => {\r\n  //     let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n  //     let i = 0;\r\n  //     let jsonData = response.data;\r\n\r\n  //     for (i = 0; i < jsonData.rows.length; i++) {\r\n  //       data.push({\r\n  //         value: jsonData.rows[i][5].filterDrag.searchStr,\r\n  //         text: jsonData.rows[i][5].label\r\n  //       });\r\n  //     }\r\n\r\n  //     return data;\r\n  //   });\r\n  // }\r\n}\r\n"]}