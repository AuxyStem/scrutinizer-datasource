{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","exporterList","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","numberofExporters","filterTypes","forEach","includes","Promise","resolve","reject","filterObject","sourceIp","exporterDetails","ports","destIp","exporterCount","console","log","push","adhocParams","findExporter","doRequest","then","exporterIpFound","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","interfaceList","interfaceDetails","interfaceID","exporterInterface","filterDrag","searchStr","interfaceName","exporterName","exporterIp","interfaceId","reportFilter","createFilters","scrutParams","eachQuery","params","findtimeJSON","selectedInterval","response","dataGranularity","used","reportJSON","formatedData","formatData","concat","apply","target","undefined","reportInterface","reportType","j","createParams","unix","reportFilters","reportDisplay","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","toString","text","interfaceThings","rows","label","refresh","exporterJSON","datasourceRequest","map","replace","scopedVars","refId","report","direction","interface","display","exporterParams","key","interfaces","exporterResults","k","element","index","filerCount","filterCount","exporterToSearch","interfacesToSearch","interfaceJson","presentOptions","HandleAdhocFilters"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata} from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.exporterList = this.exporterList();\r\n  }\r\n\r\n  query(options) {\r\n    \r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n\r\n    //data sent up into this list, it's returned at end.\r\n    let datatoGraph = [];\r\n\r\n    //only run a report if all options are populated, only matter when there are not adhoc filters.\r\n    this.runReport = false;\r\n\r\n    //takes the query and stores it to a variable\r\n    var query = this.buildQueryParameters(options);\r\n\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    \r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    //add adhoc filters to the query.\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //counter is used to keep track of number of exporters. This matters for creating the filter ojects\r\n    let numberofExporters = 0;\r\n    let filterTypes = [\"Source IP Filter\",\"Add Port Filter\", \"Destination IP Filter\" ]\r\n    if (query.adhocFilters.length > 0) {\r\n      query.adhocFilters.forEach(filter => {\r\n        if (!filterTypes.includes(filter[\"key\"])) {\r\n          numberofExporters++;\r\n        }\r\n      });\r\n\r\n      //start the process of gathering data from scrutinizer. \r\n      return new Promise((resolve, reject) => {\r\n        //filter object used to store data about addtional data about filters needed for Scrutinizer to return data. \r\n        let filterObject = {\r\n          sourceIp: [],\r\n          exporterDetails: [],\r\n          ports:[],\r\n          destIp:[]\r\n        };\r\n        \r\n        //this exporter count is compared to the number of exporters to verify we have loops threw everything before returning.\r\n        let exporterCount = 0;\r\n\r\n\r\n        query.adhocFilters.forEach(filter => {\r\n          console.log(filter['key'])\r\n          if (filter[\"key\"] === \"Source IP Filter\") {\r\n            //source IPs are pushed up as an array, will add other filter methods later.\r\n            filterObject.sourceIp.push(filter[\"value\"]);\r\n          } else if(filter[\"key\"] === \"Add Port Filter\") {\r\n            \r\n            filterObject.ports.push(filter[\"value\"])\r\n            \r\n          }else if(filter[\"key\"] === \"Destination IP Filter\") {\r\n            \r\n            filterObject.destIp.push(filter[\"value\"])\r\n            \r\n          }else {\r\n            //in some cases we will be passed the DNS/SNMP name of an exporter, here we convert it to an IP address needed for final filter. \r\n            let adhocParams = makescrutJSON.findExporter(\r\n              this.scrutInfo,\r\n              filter[\"key\"]\r\n            );\r\n\r\n            this.doRequest(adhocParams).then(exporter_details => {\r\n              let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n\r\n              //need to find the interface ID for the interface passed to Scrutinizer.\r\n              let interfaceParams = makescrutJSON.interfaceJSON(\r\n                this.scrutInfo,\r\n                exporterIpFound\r\n              );\r\n              this.doRequest(interfaceParams).then(interfaceDetails => {\r\n                let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n                //for each interface that belongs to a device, we want to compare it against the one selected in grafana. If it matched we can add it to the filters\r\n                interfaceList.forEach(exporterInterface => {\r\n                  let interfaceID = exporterInterface[5].filterDrag.searchStr;\r\n                  let interfaceName = exporterInterface[5][\"label\"];\r\n                  //if selected interface matches and interface in the list, add it to object\r\n                  if (filter[\"value\"] === interfaceName) {\r\n                    filterObject.exporterDetails.push({\r\n                      exporterName: filter[\"key\"],\r\n                      exporterIp: exporterIpFound,\r\n                      interfaceName: filter[\"value\"],\r\n                      interfaceId: interfaceID\r\n                    });\r\n                  }\r\n                });\r\n\r\n                exporterCount++;\r\n                console.log(exporterCount)\r\n                console.log(numberofExporters)\r\n                console.log(exporterCount === numberofExporters)\r\n                //we have now looped through all the exporters in the filters.\r\n                if (exporterCount === numberofExporters) {\r\n                  //created the filters we need to pass into each gadget on the dashboard.\r\n                  let reportFilter = this.createFilters(filterObject);\r\n                  console.log(reportFilter)\r\n                  //run a query for each gadget on the dashboard.\r\n                  query.targets.forEach(eachQuery => {\r\n                    let scrutParams = makescrutJSON.createFilters(\r\n                      this.scrutInfo,\r\n                      options,\r\n                      reportFilter,\r\n                      eachQuery\r\n                    );\r\n\r\n                    let params = makescrutJSON.findtimeJSON(\r\n                      this.scrutInfo,\r\n                      scrutParams\r\n                    );\r\n                    //find out what interval the data is in, we need to use this later to normalize the graphs.\r\n                    this.doRequest(params).then(response => {\r\n                      let selectedInterval =\r\n                        response.data[\"report_object\"].dataGranularity.used;\r\n                      //set up JSON to go to Scrutinizer API\r\n                      let params = makescrutJSON.reportJSON(\r\n                        this.scrutInfo,\r\n                        scrutParams\r\n                      );\r\n                      //request for report data made to scrutinizer\r\n                      this.doRequest(params).then(response => {\r\n                        //data organized into how Grafana expects it.\r\n                        let formatedData = dataHandler.formatData(\r\n                          response.data,\r\n                          scrutParams,\r\n                          selectedInterval\r\n                        );\r\n\r\n                        datatoGraph.push(formatedData);\r\n                        datatoGraph = [].concat.apply([], datatoGraph);\r\n                        numberOfQueries++;\r\n                        //make sure we have gone through each query in a gadget.\r\n                        if (numberOfQueries === query.targets.length) {\r\n                          return resolve({ data: datatoGraph });\r\n                        }\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      if (\r\n        (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n        query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n        query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n        query.targets[checkStart].reportType !== \"Select Report\"\r\n      ) {\r\n        this.runReport = true;\r\n      }\r\n\r\n      //once all drop downs are selected, run the report.\r\n      if (this.runReport == true) {\r\n        return new Promise((resolve, reject) => {\r\n          for (let j = 0; j < query.targets.length; j++) {\r\n            //grab the parameters to from the query.\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.scrutInfo[\"authToken\"],\r\n              query.targets[j].reportType, //report type\r\n              options[\"range\"][\"from\"].unix(), //start time\r\n              options[\"range\"][\"to\"].unix(), //end time\r\n              query.targets[j].target, //ip address\r\n              query.targets[j].reportDirection, //report direction\r\n              query.targets[j].reportInterface, // exporter Interface\r\n              query.targets[j].reportFilters, // filerts\r\n              query.targets[j].reportDisplay // bits or percent\r\n            );\r\n            //figure out the intervale time.\r\n            let params = makescrutJSON.findtimeJSON(\r\n              this.scrutInfo,\r\n              scrutParams\r\n            );\r\n\r\n            this.doRequest(params).then(response => {\r\n              //store interval here.\r\n              let selectedInterval =\r\n                response.data[\"report_object\"].dataGranularity.used;\r\n              //set up JSON to go to Scrutinizer API\r\n              let params = makescrutJSON.reportJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  selectedInterval\r\n                );\r\n\r\n                datatoGraph.push(formatedData);\r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                numberOfQueries++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (numberOfQueries === query.targets.length) {\r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    console.log(\"Running Test\");\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    console.log(\"running find interfaces\");\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(interfaceThings).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(\"running apply filters\");\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n    console.log(\"running get exporters\");\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n\r\n\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  //used to figure out which interfaces to show for a paritcular exporter.\r\n  HandleAdhocFilters(resolve, options) {\r\n    let exporterParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      options.key\r\n    );\r\n    let interfaces = [];\r\n\r\n    this.doRequest(exporterParams).then(exporterResults => {\r\n      let exporterIp = exporterResults[\"data\"][\"results\"][0][\"exporter_ip\"];\r\n      let interfaceParams = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIp\r\n      );\r\n\r\n      this.doRequest(interfaceParams).then(interfaceDetails => {\r\n        let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n        for (let k = 0; k < interfaceList.length; k++) {\r\n          let interfaceID = interfaceList[k][5].filterDrag.searchStr;\r\n          let interfaceName = interfaceList[k][5][\"label\"];\r\n          interfaces.push({\r\n            text: interfaceName\r\n          });\r\n        }\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n\r\n  createFilters(filterObject) {\r\n    console.log(\"running create filters\");\r\n\r\n    let reportFilters = {};\r\n\r\n    //if there are ip addres filters, add them\r\n    if (filterObject.sourceIp.length > 0) {\r\n      filterObject.sourceIp.forEach((element, index) => {\r\n        let filerCount = `sdfIps_${index}`;\r\n        reportFilters[filerCount] = `in_${element}_src`;\r\n      });\r\n    }\r\n\r\n    if (filterObject.destIp.length > 0) {\r\n      filterObject.destIp.forEach((element, index) => {\r\n        let filerCount = `sdfIps_${index}`;\r\n        reportFilters[filerCount] = `in_${element}_dst`;\r\n      });\r\n    }\r\n\r\n    if (filterObject.ports.length > 0) {\r\n      filterObject.ports.forEach((element, index) => {\r\n        let filerCount = `sdfSdPorts_${index}`;\r\n        reportFilters[filerCount] = `in_${element}_both`;\r\n      });\r\n    }\r\n    //there will always be exporter filters, add them.\r\n    filterObject.exporterDetails.forEach((element, index) => {\r\n      let { exporterIp, interfaceId } = element;\r\n      let filterCount = `sdfDips_${index}`;\r\n\r\n      reportFilters[\r\n        filterCount\r\n      ] = `in_${exporterIp}_${exporterIp}-${interfaceId}`;\r\n    });\r\n    console.log(reportFilters)\r\n\r\n    return reportFilters;\r\n  }\r\n\r\n  addInterfaces(exporterName) {\r\n    //if key is exporter there is no AND, we know we are looking for interfaces on that exporter.\r\n    let interfaces = [];\r\n    let exporterToSearch = exporterName;\r\n    let adhocParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      exporterToSearch\r\n    );\r\n    this.doRequest(adhocParams).then(exporter_details => {\r\n      let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n      let interfacesToSearch = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIpFound\r\n      );\r\n      this.doRequest(interfacesToSearch).then(interfaceDetails => {\r\n        let i = 0;\r\n        let interfaceJson = interfaceDetails.data;\r\n\r\n        if (interfaces.length > 0) {\r\n          interfaces = [];\r\n        }\r\n        for (i = 0; i < interfaceJson.rows.length; i++) {\r\n          //add interfaces to the interface filter options\r\n          interfaces.push(interfaceJson.rows[i][5].label);\r\n        }\r\n\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n  presentOptions(resolve) {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\" },\r\n        { text: \"Device Group\" },\r\n        { text: \"Source IP Filter\" },\r\n        { text: \"Add Port Filter\"}, \r\n        { text: \"Destination IP Filter\" },\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n      \r\n      this.exporters = exporterList;\r\n      return resolve(exporterList);\r\n    });\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.presentOptions(resolve);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    console.log(\"getting tag values\");\r\n\r\n    switch (options.key) {\r\n      case \"Source IP Filter\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve();\r\n        });\r\n      default:\r\n        return new Promise((resolve, reject) => {\r\n          this.HandleAdhocFilters(resolve, options);\r\n        });\r\n    }\r\n  }\r\n}\r\n"]}