{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authToken","jsonData","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","options","k","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","target","undefined","when","data","getAdhocFilters","adhocFilters","checkStart","reportInterface","reportType","Promise","resolve","reject","j","scrutParams","createParams","unix","reportFilters","reportDisplay","intervalTime","findtimeJSON","doRequest","method","params","then","selectedInterval","response","dataGranularity","used","scrutinizerJSON","reportJSON","formatedData","formatData","push","concat","apply","rm","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","toString","text","interfaceJSON","rows","filterDrag","searchStr","label","refresh","refId","exporterJSON","exporterList","datasourceRequest","console","log","map","replace","scopedVars","report","direction","interface","display"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata } from \"./reportData\";\r\nimport { reportTypes, reportDirection, displayOptions } from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\";\r\n    this.authToken = instanceSettings.jsonData[\"scrutinizerKey\"];\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n\r\n    this.filters = \"\";\r\n  }\r\n\r\n  query(options) {\r\n    let k = 0;\r\n    let datatoGraph = [];\r\n\r\n    this.runReport = false;\r\n\r\n    var query = this.buildQueryParameters(options);\r\n    \r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n\r\n    if (query.targets[0].target === undefined) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //make sure use has selected all of drop downs before running report\r\n    if (\r\n      (query.targets[checkStart].target !== undefined || \"Select Exporter\") &&\r\n      query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n      query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n      query.targets[checkStart].reportType !== \"Select Report\"\r\n    ) {\r\n      this.runReport = true;\r\n    }\r\n    //once all drop downs are selected, run the report.\r\n    if (this.runReport == true) {\r\n      return new Promise((resolve, reject) => {\r\n        for (let j = 0; j < query.targets.length; j++) {\r\n          //grab the parameters to from the query.\r\n          let scrutParams = makescrutJSON.createParams(\r\n            this.authToken,\r\n            query.targets[j].reportType, //report type\r\n            options[\"range\"][\"from\"].unix(), //start time\r\n            options[\"range\"][\"to\"].unix(), //end time\r\n            query.targets[j].target, //ip address\r\n            query.targets[j].reportDirection, //report direction\r\n            query.targets[j].reportInterface, // exporter Interface\r\n            query.targets[j].reportFilters, // filerts\r\n            query.targets[j].reportDisplay // bits or percent\r\n          );\r\n          //figure out the intervale time.\r\n          let intervalTime = makescrutJSON.findtimeJSON(scrutParams);\r\n\r\n          \r\n\r\n          this.doRequest({\r\n            url: `${this.url}`,\r\n            method: \"GET\",\r\n            params: intervalTime\r\n          }).then(response => {\r\n            \r\n            //store interval here.\r\n            let selectedInterval =\r\n              response.data[\"report_object\"].dataGranularity.used;\r\n            //set up JSON to go to Scrutinizer API\r\n            let scrutinizerJSON = makescrutJSON.reportJSON(scrutParams);\r\n\r\n            \r\n\r\n            this.doRequest({\r\n              url: `${this.url}`,\r\n              method: \"GET\",\r\n              params: scrutinizerJSON\r\n            }).then(response => {\r\n              let formatedData = dataHandler.formatData(\r\n                response.data,\r\n                scrutParams,\r\n                selectedInterval\r\n              );\r\n\r\n              datatoGraph.push(formatedData);\r\n              datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n              k++;\r\n              //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n              if (k === query.targets.length) {\r\n                return resolve({ data: datatoGraph });\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.doRequest({\r\n      url: `${this.url}`,\r\n      method: \"GET\",\r\n      params: {\r\n        rm: \"licensing\",\r\n        authToken: `${this.authToken}`\r\n      }\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets[0].target != undefined) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if(selectedIP === 'deviceGroup'){\r\n        let params = makescrutJSON.groupJSON(\r\n          this.url,\r\n          this.authToken\r\n        )\r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response=>{\r\n          let i = 0\r\n          \r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i=0; i < jsonData.length; i++){\r\n            data.push({\r\n              value:jsonData[i]['id'].toString(),\r\n              text:jsonData[i]['name']\r\n            })\r\n\r\n          }\r\n\r\n          return data;\r\n        })\r\n      }else{\r\n        //otherwise we figre out what interfaces are available for selected device. \r\n        let params = makescrutJSON.interfaceJSON(\r\n          this.url,\r\n          this.authToken,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(params).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });}\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters(query, scope) {\r\n    if (scope.ctrl.target.refId === \"A\" && query === \"\") {\r\n      let params = makescrutJSON.exporterJSON(this.url, this.authToken);\r\n      \r\n      return this.doRequest(params).then(response => {\r\n        let exporterList = [\r\n          { text: \"All Exporters\", value: \"allExporters\" },\r\n          { text: \"Device Group\", value: \"deviceGroup\" }];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n          exporterList.push({\r\n            text: response.data[i][\"name\"],\r\n            value: response.data[i][\"ip\"]\r\n          });\r\n        }\r\n\r\n        this.exporters = exporterList;\r\n        return exporterList;\r\n      });\r\n    } else {\r\n      return this.exporters;\r\n    }\r\n  }\r\n//function from SimpleJson datasource to \r\n  // mapToTextValue(result) {\r\n  //   return _.map(result.data, (d, i) => {\r\n  //     if (d && d.text && d.value) {\r\n  //       return { text: d.text, value: d.value };\r\n  //     } else if (_.isObject(d)) {\r\n  //       return { text: d, value: i };\r\n  //     }\r\n\r\n  //     return { text: d, value: d };\r\n  //   });\r\n  // }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    console.log(options)\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n      \r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n          reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        )\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n}\r\n"]}