{"version":3,"sources":["../src/reportData.js"],"names":["_","scrutinizerExporters","params","rm","type","formatParams","Object","keys","map","key","encodeURIComponent","join","moveData","arr","old_index","new_index","length","k","push","undefined","splice","ScrutinizerJSON","authToken","reportType","startTime","endTime","ipAddress","reportDirection","expinterface","reportfilter","exporterInterface","scrutFilters","sdfDips_0","filterJson","JSON","parse","hasOwnProperty","action","rpt_json","stringify","reportTypeLang","reportDirections","selected","times","dateRange","start","end","filters","dataGranularity","data_requested","graph","table","query_limit","offset","max_num_rows","view","session_state","client_time_zone","order_by","search","column","value","comparison","data","filterType","_key","hostDisplayType","report_data","clientTimezone","oneCollectorRequest","Handledata","rearrangeData","oldIndex","newIndex","scrutData","intervalTime","datatoGraph","graphingData","i","j","graphData","tableData","target","datapoints"],"mappings":"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","file":"reportData.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class scrutinizerExporters {\r\n  constructor() {\r\n    this.params = {\r\n      rm: \"get_known_objects\",\r\n      type: \"devices\"\r\n    };\r\n\r\n    this.formatParams = params => {\r\n      return (\r\n        \"?\" +\r\n        Object.keys(params)\r\n          .map(function(key) {\r\n            return key + \"=\" + encodeURIComponent(params[key]);\r\n          })\r\n          .join(\"&\")\r\n      );\r\n    };\r\n\r\n    this.moveData = (arr, old_index, new_index) => {\r\n      while (old_index < 0) {\r\n        old_index += arr.length;\r\n      }\r\n      while (new_index < 0) {\r\n        new_index += arr.length;\r\n      }\r\n      if (new_index >= arr.length) {\r\n        let k = new_index - arr.length;\r\n\r\n        while (k-- + 1) {\r\n          arr.push(undefined);\r\n        }\r\n      }\r\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n      return arr;\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport class ScrutinizerJSON {\r\n  constructor() {}\r\n\r\n  reportJSON(\r\n    authToken,\r\n    reportType,\r\n    startTime,\r\n    endTime,\r\n    ipAddress,\r\n    reportDirection,\r\n    expinterface,\r\n    reportfilter\r\n  ) {\r\n\r\n\r\n    let exporterInterface;\r\n    let scrutFilters;\r\n\r\n    // if user wants all interface or specific interface\r\n    if (expinterface === \"allInterfaces\") {\r\n      exporterInterface = \"_ALL\";\r\n    } else {\r\n      exporterInterface = \"-\" + expinterface;\r\n    }\r\n\r\n\r\n    //  if user wants all devices, then they are defualted to all interfaces\r\n    if (ipAddress === \"allExporters\") {\r\n      scrutFilters = {\r\n        sdfDips_0: `in_GROUP_ALL`\r\n      };\r\n    } else {\r\n    // if user wants a specific device, they can either have ALL interfaces, or a specific interface\r\n      if (exporterInterface === \"_ALL\") {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_ALL`\r\n        };\r\n      } else {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_${ipAddress}${exporterInterface}`\r\n        };\r\n      }\r\n    }\r\n    //if user is adding filters to the report.\r\n    if (reportfilter !== \"No Filter\") {\r\n      let filterJson = JSON.parse(reportfilter);\r\n      for (var key in filterJson) {\r\n        if (filterJson.hasOwnProperty(key)) {\r\n          //if use copies filter from Scrutinizer example, we want to ignore device filters, as they are set above.\r\n          if (key != \"sdfDips_0\") {\r\n            scrutFilters[key] = filterJson[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n//returning report params to be passed into request\r\n    let params = {\r\n      rm: \"report_api\",\r\n      action: \"get\",\r\n      authToken: authToken,\r\n      rpt_json: JSON.stringify({\r\n        reportTypeLang: reportType,\r\n        reportDirections: {\r\n          selected: reportDirection\r\n        },\r\n        times: {\r\n          dateRange: \"Custom\",\r\n          start: `${startTime}`,\r\n          end: `${endTime}`\r\n        },\r\n        filters: scrutFilters,\r\n        dataGranularity: {\r\n          selected: \"auto\"\r\n        }\r\n      }),\r\n\r\n      data_requested: {\r\n        [reportDirection]: {\r\n          graph: \"all\",\r\n          table: {\r\n            query_limit: {\r\n              offset: 0,\r\n              max_num_rows: 10\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    return params;\r\n  }\r\n\r\n  //queries the API with the selected exporter to find available interfaces.\r\n\r\n  interfaceJson(authToken, ipAddress) {\r\n    let params = {\r\n      rm: \"status\",\r\n      action: \"get\",\r\n      view: \"topInterfaces\",\r\n      authToken: authToken,\r\n      session_state: JSON.stringify({\r\n        client_time_zone: \"America/New_York\",\r\n        order_by: [],\r\n        search: [\r\n          {\r\n            column: \"exporter_search\",\r\n            value: `${ipAddress}`,\r\n            comparison: \"like\",\r\n            data: { filterType: \"multi_string\" },\r\n            _key: `exporter_search_like_${ipAddress}`\r\n          }\r\n        ],\r\n        query_limit: { offset: 0, max_num_rows: 50 },\r\n        hostDisplayType: \"dns\"\r\n      })\r\n    };\r\n\r\n    \r\n    return params;\r\n  }\r\n\r\n  //queries API to figure out what interval will be used for graphing based off timeranges passed. \r\n  findtimeJSON(\r\n    authToken,\r\n    reportType,\r\n    startTime,\r\n    endTime,\r\n    ipAddress,\r\n    reportDirection,\r\n    expinterface,\r\n    reportfilter\r\n  ) {\r\n    let exporterInterface;\r\n    let scrutFilters;\r\n\r\n    if (expinterface === \"allInterfaces\") {\r\n      exporterInterface = \"_ALL\";\r\n    } else {\r\n      exporterInterface = \"-\" + expinterface;\r\n    }\r\n\r\n\r\n    //  if user wants all devices, then they are defualted to all interfaces\r\n    if (ipAddress === \"allExporters\") {\r\n      scrutFilters = {\r\n        sdfDips_0: `in_GROUP_ALL`\r\n      };\r\n    } else {\r\n    // if user wants a specific device, they can either have ALL interfaces, or a specific interface\r\n      if (exporterInterface === \"_ALL\") {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_ALL`\r\n        };\r\n      } else {\r\n        scrutFilters = {\r\n          sdfDips_0: `in_${ipAddress}_${ipAddress}${exporterInterface}`\r\n        };\r\n      }\r\n    }\r\n    //if user is adding filters to the report.\r\n    if (reportfilter !== \"No Filter\") {\r\n      let filterJson = JSON.parse(reportfilter);\r\n      for (var key in filterJson) {\r\n        if (filterJson.hasOwnProperty(key)) {\r\n          if (key != \"sdfDips_0\") {\r\n            scrutFilters[key] = filterJson[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let params = {\r\n      rm: \"report_start\",\r\n      authToken: authToken,\r\n      report_data: {\r\n        parse: true,\r\n        reportDirections: { selected: `${reportDirection}` },\r\n        reportTypeLang: `${reportType}`,\r\n        times: {\r\n          dateRange: \"Custom\",\r\n          start: `${startTime}`,\r\n          end: `${endTime}`,\r\n          clientTimezone: \"America/New_York\"\r\n        },\r\n        filters: scrutFilters,\r\n        dataGranularity: { selected: \"auto\" },\r\n        oneCollectorRequest: false\r\n      }\r\n    };\r\n\r\n    return params;\r\n  }\r\n}\r\n\r\nexport class Handledata {\r\n  constructor() {\r\n    //scrutinizer returns graph data opposite of how grafana wants it. So we flip it here.\r\n    this.rearrangeData = (arr, oldIndex, newIndex) => {\r\n      while (oldIndex < 0) {\r\n        old_index += arr.length;\r\n      }\r\n      while (newIndex < 0) {\r\n        new_index += arr.length;\r\n      }\r\n      if (newIndex >= arr.length) {\r\n        let k = newIndex - arr.length;\r\n\r\n        while (k-- + 1) {\r\n          arr.push(undefined);\r\n        }\r\n      }\r\n      arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n      return arr;\r\n    };\r\n  }\r\n\r\n \r\n  //grafana wants time in millaseconds. so we multiple by 1000.\r\n  //we also want to return data in bits, so we device by 8\r\n  formatData(scrutData, reportDirection, intervalTime) {\r\n \r\n    let datatoGraph = [];\r\n    let graphingData = scrutData;\r\n    let i,\r\n      j = 0;\r\n    let graphData = graphingData[\"report\"][\"graph\"][\"pie\"][reportDirection];\r\n    let tableData =\r\n      graphingData[\"report\"][\"graph\"][\"timeseries\"][reportDirection];\r\n    for (i = 0; i < tableData.length; i++) {\r\n      for (j = 0; j < tableData[i].length; j++) {\r\n        tableData[i][j][0] = tableData[i][j][0] * 1000;\r\n        tableData[i][j][1] = (tableData[i][j][1] * 8) / (intervalTime * 60);\r\n        this.rearrangeData(tableData[i][j], 0, 1);\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < graphData.length; i++) {\r\n      datatoGraph.push({\r\n        target: graphData[i][\"label\"],\r\n        datapoints: tableData[i]\r\n      });\r\n    }\r\n\r\n    return datatoGraph;\r\n  }\r\n\r\n}\r\n"]}